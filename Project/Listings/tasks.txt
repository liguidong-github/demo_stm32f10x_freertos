; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\tasks.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\tasks.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\STM32F10x_StdPeriph_Libraries -I..\STM32F10x_StdPeriph_Libraries\STM32F10x_StdPeriph_Driver\src -I..\STM32F10x_StdPeriph_Libraries\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\CoreSupport -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\FreeRTOS\Source -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\FreeRTOS\Source\portable\MemMang -I..\FreeRTOS -I..\User\Bsp -I..\SEGGER_RTT\RTT -I.\RTE\_Demo -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\tasks.crf ..\FreeRTOS\Source\tasks.c]
                          THUMB

                          AREA ||i.pcTaskGetName||, CODE, READONLY, ALIGN=2

                  pcTaskGetName PROC
;;;2357   
;;;2358   char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  4601              MOV      r1,r0
;;;2359   {
;;;2360   TCB_t *pxTCB;
;;;2361   
;;;2362   	/* If null is passed in here then the name of the calling task is being
;;;2363   	queried. */
;;;2364   	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
000002  b911              CBNZ     r1,|L1.10|
000004  4803              LDR      r0,|L1.20|
000006  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000008  e000              B        |L1.12|
                  |L1.10|
00000a  4608              MOV      r0,r1
                  |L1.12|
00000c  4602              MOV      r2,r0
;;;2365   	configASSERT( pxTCB );
;;;2366   	return &( pxTCB->pcTaskName[ 0 ] );
00000e  f1020034          ADD      r0,r2,#0x34
;;;2367   }
000012  4770              BX       lr
;;;2368   /*-----------------------------------------------------------*/
                          ENDP

                  |L1.20|
                          DCD      pxCurrentTCB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;5176   
;;;5177   static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5178   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;5179   TickType_t xTimeToWake;
;;;5180   const TickType_t xConstTickCount = xTickCount;
000008  481c              LDR      r0,|L2.124|
00000a  6807              LDR      r7,[r0,#0]  ; xTickCount
;;;5181   
;;;5182   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;5183   	{
;;;5184   		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
;;;5185   		reset to pdFALSE so it can be detected as having been set to pdTRUE
;;;5186   		when the task leaves the Blocked state. */
;;;5187   		pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;5188   	}
;;;5189   	#endif
;;;5190   
;;;5191   	/* Remove the task from the ready list before adding it to the blocked list
;;;5192   	as the same list item is used for both lists. */
;;;5193   	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000c  481c              LDR      r0,|L2.128|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       uxListRemove
000016  b950              CBNZ     r0,|L2.46|
;;;5194   	{
;;;5195   		/* The current task must be in a ready list, so there is no need to
;;;5196   		check, and the port reset macro can be called directly. */
;;;5197   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
000018  4819              LDR      r0,|L2.128|
00001a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00001c  f890102c          LDRB     r1,[r0,#0x2c]
000020  2001              MOVS     r0,#1
000022  4088              LSLS     r0,r0,r1
000024  4917              LDR      r1,|L2.132|
000026  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000028  4381              BICS     r1,r1,r0
00002a  4816              LDR      r0,|L2.132|
00002c  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L2.46|
;;;5198   	}
;;;5199   	else
;;;5200   	{
;;;5201   		mtCOVERAGE_TEST_MARKER();
;;;5202   	}
;;;5203   
;;;5204   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;5205   	{
;;;5206   		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
00002e  1c68              ADDS     r0,r5,#1
000030  b938              CBNZ     r0,|L2.66|
000032  b136              CBZ      r6,|L2.66|
;;;5207   		{
;;;5208   			/* Add the task to the suspended task list instead of a delayed task
;;;5209   			list to ensure it is not woken by a timing event.  It will block
;;;5210   			indefinitely. */
;;;5211   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
000034  4812              LDR      r0,|L2.128|
000036  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000038  1d09              ADDS     r1,r1,#4
00003a  4813              LDR      r0,|L2.136|
00003c  f7fffffe          BL       vListInsertEnd
000040  e01a              B        |L2.120|
                  |L2.66|
;;;5212   		}
;;;5213   		else
;;;5214   		{
;;;5215   			/* Calculate the time at which the task should be woken if the event
;;;5216   			does not occur.  This may overflow but this doesn't matter, the
;;;5217   			kernel will manage it correctly. */
;;;5218   			xTimeToWake = xConstTickCount + xTicksToWait;
000042  197c              ADDS     r4,r7,r5
;;;5219   
;;;5220   			/* The list item will be inserted in wake time order. */
;;;5221   			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
000044  480e              LDR      r0,|L2.128|
000046  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000048  6044              STR      r4,[r0,#4]
;;;5222   
;;;5223   			if( xTimeToWake < xConstTickCount )
00004a  42bc              CMP      r4,r7
00004c  d207              BCS      |L2.94|
;;;5224   			{
;;;5225   				/* Wake time has overflowed.  Place this item in the overflow
;;;5226   				list. */
;;;5227   				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
00004e  480c              LDR      r0,|L2.128|
000050  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000052  1d09              ADDS     r1,r1,#4
000054  480d              LDR      r0,|L2.140|
000056  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
000058  f7fffffe          BL       vListInsert
00005c  e00c              B        |L2.120|
                  |L2.94|
;;;5228   			}
;;;5229   			else
;;;5230   			{
;;;5231   				/* The wake time has not overflowed, so the current block list
;;;5232   				is used. */
;;;5233   				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
00005e  4808              LDR      r0,|L2.128|
000060  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000062  1d09              ADDS     r1,r1,#4
000064  480a              LDR      r0,|L2.144|
000066  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000068  f7fffffe          BL       vListInsert
;;;5234   
;;;5235   				/* If the task entering the blocked state was placed at the
;;;5236   				head of the list of blocked tasks then xNextTaskUnblockTime
;;;5237   				needs to be updated too. */
;;;5238   				if( xTimeToWake < xNextTaskUnblockTime )
00006c  4809              LDR      r0,|L2.148|
00006e  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000070  4284              CMP      r4,r0
000072  d201              BCS      |L2.120|
;;;5239   				{
;;;5240   					xNextTaskUnblockTime = xTimeToWake;
000074  4807              LDR      r0,|L2.148|
000076  6004              STR      r4,[r0,#0]  ; xNextTaskUnblockTime
                  |L2.120|
;;;5241   				}
;;;5242   				else
;;;5243   				{
;;;5244   					mtCOVERAGE_TEST_MARKER();
;;;5245   				}
;;;5246   			}
;;;5247   		}
;;;5248   	}
;;;5249   	#else /* INCLUDE_vTaskSuspend */
;;;5250   	{
;;;5251   		/* Calculate the time at which the task should be woken if the event
;;;5252   		does not occur.  This may overflow but this doesn't matter, the kernel
;;;5253   		will manage it correctly. */
;;;5254   		xTimeToWake = xConstTickCount + xTicksToWait;
;;;5255   
;;;5256   		/* The list item will be inserted in wake time order. */
;;;5257   		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
;;;5258   
;;;5259   		if( xTimeToWake < xConstTickCount )
;;;5260   		{
;;;5261   			/* Wake time has overflowed.  Place this item in the overflow list. */
;;;5262   			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;5263   		}
;;;5264   		else
;;;5265   		{
;;;5266   			/* The wake time has not overflowed, so the current block list is used. */
;;;5267   			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;5268   
;;;5269   			/* If the task entering the blocked state was placed at the head of the
;;;5270   			list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;5271   			too. */
;;;5272   			if( xTimeToWake < xNextTaskUnblockTime )
;;;5273   			{
;;;5274   				xNextTaskUnblockTime = xTimeToWake;
;;;5275   			}
;;;5276   			else
;;;5277   			{
;;;5278   				mtCOVERAGE_TEST_MARKER();
;;;5279   			}
;;;5280   		}
;;;5281   
;;;5282   		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
;;;5283   		( void ) xCanBlockIndefinitely;
;;;5284   	}
;;;5285   	#endif /* INCLUDE_vTaskSuspend */
;;;5286   }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;5287   
                          ENDP

                  |L2.124|
                          DCD      xTickCount
                  |L2.128|
                          DCD      pxCurrentTCB
                  |L2.132|
                          DCD      uxTopReadyPriority
                  |L2.136|
                          DCD      xSuspendedTaskList
                  |L2.140|
                          DCD      pxOverflowDelayedTaskList
                  |L2.144|
                          DCD      pxDelayedTaskList
                  |L2.148|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvAddNewTaskToReadyList||, CODE, READONLY, ALIGN=2

                  prvAddNewTaskToReadyList PROC
;;;1076   
;;;1077   static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
000000  b510              PUSH     {r4,lr}
;;;1078   {
000002  4604              MOV      r4,r0
;;;1079   	/* Ensure interrupts don't access the task lists while the lists are being
;;;1080   	updated. */
;;;1081   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1082   	{
;;;1083   		uxCurrentNumberOfTasks++;
000008  4823              LDR      r0,|L3.152|
00000a  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00000c  1c40              ADDS     r0,r0,#1
00000e  4922              LDR      r1,|L3.152|
000010  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;1084   		if( pxCurrentTCB == NULL )
000012  4822              LDR      r0,|L3.156|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  b940              CBNZ     r0,|L3.42|
;;;1085   		{
;;;1086   			/* There are no other tasks, or all the other tasks are in
;;;1087   			the suspended state - make this the current task. */
;;;1088   			pxCurrentTCB = pxNewTCB;
000018  4820              LDR      r0,|L3.156|
00001a  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
;;;1089   
;;;1090   			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000020  2801              CMP      r0,#1
000022  d10d              BNE      |L3.64|
;;;1091   			{
;;;1092   				/* This is the first task to be created so do the preliminary
;;;1093   				initialisation required.  We will not recover if this call
;;;1094   				fails, but we will report the failure. */
;;;1095   				prvInitialiseTaskLists();
000024  f7fffffe          BL       prvInitialiseTaskLists
000028  e00a              B        |L3.64|
                  |L3.42|
;;;1096   			}
;;;1097   			else
;;;1098   			{
;;;1099   				mtCOVERAGE_TEST_MARKER();
;;;1100   			}
;;;1101   		}
;;;1102   		else
;;;1103   		{
;;;1104   			/* If the scheduler is not already running, make this task the
;;;1105   			current task if it is the highest priority task to be created
;;;1106   			so far. */
;;;1107   			if( xSchedulerRunning == pdFALSE )
00002a  481d              LDR      r0,|L3.160|
00002c  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00002e  b938              CBNZ     r0,|L3.64|
;;;1108   			{
;;;1109   				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
000030  481a              LDR      r0,|L3.156|
000032  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000034  6ac0              LDR      r0,[r0,#0x2c]
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  4288              CMP      r0,r1
00003a  d801              BHI      |L3.64|
;;;1110   				{
;;;1111   					pxCurrentTCB = pxNewTCB;
00003c  4817              LDR      r0,|L3.156|
00003e  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
                  |L3.64|
;;;1112   				}
;;;1113   				else
;;;1114   				{
;;;1115   					mtCOVERAGE_TEST_MARKER();
;;;1116   				}
;;;1117   			}
;;;1118   			else
;;;1119   			{
;;;1120   				mtCOVERAGE_TEST_MARKER();
;;;1121   			}
;;;1122   		}
;;;1123   
;;;1124   		uxTaskNumber++;
000040  4818              LDR      r0,|L3.164|
000042  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
000044  1c40              ADDS     r0,r0,#1
000046  4917              LDR      r1,|L3.164|
000048  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;1125   
;;;1126   		#if ( configUSE_TRACE_FACILITY == 1 )
;;;1127   		{
;;;1128   			/* Add a counter into the TCB for tracing only. */
;;;1129   			pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;1130   		}
;;;1131   		#endif /* configUSE_TRACE_FACILITY */
;;;1132   		traceTASK_CREATE( pxNewTCB );
;;;1133   
;;;1134   		prvAddTaskToReadyList( pxNewTCB );
00004a  f894102c          LDRB     r1,[r4,#0x2c]
00004e  2001              MOVS     r0,#1
000050  4088              LSLS     r0,r0,r1
000052  4915              LDR      r1,|L3.168|
000054  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000056  4308              ORRS     r0,r0,r1
000058  4913              LDR      r1,|L3.168|
00005a  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00005c  6ae1              LDR      r1,[r4,#0x2c]
00005e  eb010181          ADD      r1,r1,r1,LSL #2
000062  4a12              LDR      r2,|L3.172|
000064  eb020081          ADD      r0,r2,r1,LSL #2
000068  1d21              ADDS     r1,r4,#4
00006a  f7fffffe          BL       vListInsertEnd
;;;1135   
;;;1136   		portSETUP_TCB( pxNewTCB );
;;;1137   	}
;;;1138   	taskEXIT_CRITICAL();
00006e  f7fffffe          BL       vPortExitCritical
;;;1139   
;;;1140   	if( xSchedulerRunning != pdFALSE )
000072  480b              LDR      r0,|L3.160|
000074  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000076  b168              CBZ      r0,|L3.148|
;;;1141   	{
;;;1142   		/* If the created task is of a higher priority than the current task
;;;1143   		then it should run now. */
;;;1144   		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
000078  4808              LDR      r0,|L3.156|
00007a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00007c  6ac0              LDR      r0,[r0,#0x2c]
00007e  6ae1              LDR      r1,[r4,#0x2c]
000080  4288              CMP      r0,r1
000082  d207              BCS      |L3.148|
;;;1145   		{
;;;1146   			taskYIELD_IF_USING_PREEMPTION();
000084  f04f5080          MOV      r0,#0x10000000
000088  4909              LDR      r1,|L3.176|
00008a  6008              STR      r0,[r1,#0]
00008c  f3bf8f4f          DSB      
000090  f3bf8f6f          ISB      
                  |L3.148|
;;;1147   		}
;;;1148   		else
;;;1149   		{
;;;1150   			mtCOVERAGE_TEST_MARKER();
;;;1151   		}
;;;1152   	}
;;;1153   	else
;;;1154   	{
;;;1155   		mtCOVERAGE_TEST_MARKER();
;;;1156   	}
;;;1157   }
000094  bd10              POP      {r4,pc}
;;;1158   /*-----------------------------------------------------------*/
                          ENDP

000096  0000              DCW      0x0000
                  |L3.152|
                          DCD      uxCurrentNumberOfTasks
                  |L3.156|
                          DCD      pxCurrentTCB
                  |L3.160|
                          DCD      xSchedulerRunning
                  |L3.164|
                          DCD      uxTaskNumber
                  |L3.168|
                          DCD      uxTopReadyPriority
                  |L3.172|
                          DCD      pxReadyTasksLists
                  |L3.176|
                          DCD      0xe000ed04

                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=1

                  prvCheckTasksWaitingTermination PROC
;;;3638   
;;;3639   static void prvCheckTasksWaitingTermination( void )
000000  4770              BX       lr
;;;3640   {
;;;3641   
;;;3642   	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
;;;3643   
;;;3644   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3645   	{
;;;3646   		TCB_t *pxTCB;
;;;3647   
;;;3648   		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
;;;3649   		being called too often in the idle task. */
;;;3650   		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
;;;3651   		{
;;;3652   			taskENTER_CRITICAL();
;;;3653   			{
;;;3654   				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
;;;3655   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;3656   				--uxCurrentNumberOfTasks;
;;;3657   				--uxDeletedTasksWaitingCleanUp;
;;;3658   			}
;;;3659   			taskEXIT_CRITICAL();
;;;3660   
;;;3661   			prvDeleteTCB( pxTCB );
;;;3662   		}
;;;3663   	}
;;;3664   	#endif /* INCLUDE_vTaskDelete */
;;;3665   }
;;;3666   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;3391    */
;;;3392   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  bf00              NOP      
                  |L5.2|
;;;3393   {
;;;3394   	/* Stop warnings. */
;;;3395   	( void ) pvParameters;
;;;3396   
;;;3397   	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
;;;3398   	SCHEDULER IS STARTED. **/
;;;3399   
;;;3400   	/* In case a task that has a secure context deletes itself, in which case
;;;3401   	the idle task is responsible for deleting the task's secure context, if
;;;3402   	any. */
;;;3403   	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
;;;3404   
;;;3405   	for( ;; )
;;;3406   	{
;;;3407   		/* See if any tasks have deleted themselves - if so then the idle task
;;;3408   		is responsible for freeing the deleted task's TCB and stack. */
;;;3409   		prvCheckTasksWaitingTermination();
000002  f7fffffe          BL       prvCheckTasksWaitingTermination
;;;3410   
;;;3411   		#if ( configUSE_PREEMPTION == 0 )
;;;3412   		{
;;;3413   			/* If we are not using preemption we keep forcing a task switch to
;;;3414   			see if any other task has become available.  If we are using
;;;3415   			preemption we don't need to do this as any task becoming available
;;;3416   			will automatically get the processor anyway. */
;;;3417   			taskYIELD();
;;;3418   		}
;;;3419   		#endif /* configUSE_PREEMPTION */
;;;3420   
;;;3421   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;3422   		{
;;;3423   			/* When using preemption tasks of equal priority will be
;;;3424   			timesliced.  If a task that is sharing the idle priority is ready
;;;3425   			to run then the idle task should yield before the end of the
;;;3426   			timeslice.
;;;3427   
;;;3428   			A critical region is not required here as we are just reading from
;;;3429   			the list, and an occasional incorrect value will not matter.  If
;;;3430   			the ready list at the idle priority contains more than one task
;;;3431   			then a task other than the idle task is ready to execute. */
;;;3432   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000006  4806              LDR      r0,|L5.32|
000008  6800              LDR      r0,[r0,#0]  ; pxReadyTasksLists
00000a  2801              CMP      r0,#1
00000c  d9f9              BLS      |L5.2|
;;;3433   			{
;;;3434   				taskYIELD();
00000e  f04f5080          MOV      r0,#0x10000000
000012  4904              LDR      r1,|L5.36|
000014  6008              STR      r0,[r1,#0]
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  e7f0              B        |L5.2|
;;;3435   			}
;;;3436   			else
;;;3437   			{
;;;3438   				mtCOVERAGE_TEST_MARKER();
;;;3439   			}
;;;3440   		}
;;;3441   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;3442   
;;;3443   		#if ( configUSE_IDLE_HOOK == 1 )
;;;3444   		{
;;;3445   			extern void vApplicationIdleHook( void );
;;;3446   
;;;3447   			/* Call the user defined function from within the idle task.  This
;;;3448   			allows the application designer to add background functionality
;;;3449   			without the overhead of a separate task.
;;;3450   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;3451   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;3452   			vApplicationIdleHook();
;;;3453   		}
;;;3454   		#endif /* configUSE_IDLE_HOOK */
;;;3455   
;;;3456   		/* This conditional compilation should use inequality to 0, not equality
;;;3457   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;3458   		user defined low power mode	implementations require
;;;3459   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;3460   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;3461   		{
;;;3462   		TickType_t xExpectedIdleTime;
;;;3463   
;;;3464   			/* It is not desirable to suspend then resume the scheduler on
;;;3465   			each iteration of the idle task.  Therefore, a preliminary
;;;3466   			test of the expected idle time is performed without the
;;;3467   			scheduler suspended.  The result here is not necessarily
;;;3468   			valid. */
;;;3469   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3470   
;;;3471   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3472   			{
;;;3473   				vTaskSuspendAll();
;;;3474   				{
;;;3475   					/* Now the scheduler is suspended, the expected idle
;;;3476   					time can be sampled again, and this time its value can
;;;3477   					be used. */
;;;3478   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;3479   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3480   
;;;3481   					/* Define the following macro to set xExpectedIdleTime to 0
;;;3482   					if the application does not want
;;;3483   					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
;;;3484   					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
;;;3485   
;;;3486   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3487   					{
;;;3488   						traceLOW_POWER_IDLE_BEGIN();
;;;3489   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;3490   						traceLOW_POWER_IDLE_END();
;;;3491   					}
;;;3492   					else
;;;3493   					{
;;;3494   						mtCOVERAGE_TEST_MARKER();
;;;3495   					}
;;;3496   				}
;;;3497   				( void ) xTaskResumeAll();
;;;3498   			}
;;;3499   			else
;;;3500   			{
;;;3501   				mtCOVERAGE_TEST_MARKER();
;;;3502   			}
;;;3503   		}
;;;3504   		#endif /* configUSE_TICKLESS_IDLE */
;;;3505   	}
;;;3506   }
;;;3507   /*-----------------------------------------------------------*/
                          ENDP

                  |L5.32|
                          DCD      pxReadyTasksLists
                  |L5.36|
                          DCD      0xe000ed04

                          AREA ||i.prvInitialiseNewTask||, CODE, READONLY, ALIGN=1

                  prvInitialiseNewTask PROC
;;;823    
;;;824    static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;825    									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;826    									const uint32_t ulStackDepth,
;;;827    									void * const pvParameters,
;;;828    									UBaseType_t uxPriority,
;;;829    									TaskHandle_t * const pxCreatedTask,
;;;830    									TCB_t *pxNewTCB,
;;;831    									const MemoryRegion_t * const xRegions )
;;;832    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  e9dd7a0e          LDRD     r7,r10,[sp,#0x38]
00000e  9c10              LDR      r4,[sp,#0x40]
;;;833    StackType_t *pxTopOfStack;
;;;834    UBaseType_t x;
;;;835    
;;;836    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;837    		/* Should the task be created in privileged mode? */
;;;838    		BaseType_t xRunPrivileged;
;;;839    		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;840    		{
;;;841    			xRunPrivileged = pdTRUE;
;;;842    		}
;;;843    		else
;;;844    		{
;;;845    			xRunPrivileged = pdFALSE;
;;;846    		}
;;;847    		uxPriority &= ~portPRIVILEGE_BIT;
;;;848    	#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;849    
;;;850    	/* Avoid dependency on memset() if it is not required. */
;;;851    	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
;;;852    	{
;;;853    		/* Fill the stack with a known value to assist debugging. */
;;;854    		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
;;;855    	}
;;;856    	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
;;;857    
;;;858    	/* Calculate the top of stack address.  This depends on whether the stack
;;;859    	grows from high memory to low (as per the 80x86) or vice versa.
;;;860    	portSTACK_GROWTH is used to make the result positive or negative as required
;;;861    	by the port. */
;;;862    	#if( portSTACK_GROWTH < 0 )
;;;863    	{
;;;864    		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
000010  f1a90001          SUB      r0,r9,#1
000014  6b21              LDR      r1,[r4,#0x30]
000016  eb010b80          ADD      r11,r1,r0,LSL #2
;;;865    		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
00001a  f02b0b07          BIC      r11,r11,#7
;;;866    
;;;867    		/* Check the alignment of the calculated top of stack is correct. */
;;;868    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;869    
;;;870    		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
;;;871    		{
;;;872    			/* Also record the stack's high address, which may assist
;;;873    			debugging. */
;;;874    			pxNewTCB->pxEndOfStack = pxTopOfStack;
;;;875    		}
;;;876    		#endif /* configRECORD_STACK_HIGH_ADDRESS */
;;;877    	}
;;;878    	#else /* portSTACK_GROWTH */
;;;879    	{
;;;880    		pxTopOfStack = pxNewTCB->pxStack;
;;;881    
;;;882    		/* Check the alignment of the stack buffer is correct. */
;;;883    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;884    
;;;885    		/* The other extreme of the stack space is required if stack checking is
;;;886    		performed. */
;;;887    		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
;;;888    	}
;;;889    	#endif /* portSTACK_GROWTH */
;;;890    
;;;891    	/* Store the task name in the TCB. */
;;;892    	if( pcName != NULL )
00001e  b186              CBZ      r6,|L6.66|
;;;893    	{
;;;894    		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
000020  2500              MOVS     r5,#0
000022  e007              B        |L6.52|
                  |L6.36|
;;;895    		{
;;;896    			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
000024  5d71              LDRB     r1,[r6,r5]
000026  f1040034          ADD      r0,r4,#0x34
00002a  5541              STRB     r1,[r0,r5]
;;;897    
;;;898    			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;899    			configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;900    			string is not accessible (extremely unlikely). */
;;;901    			if( pcName[ x ] == ( char ) 0x00 )
00002c  5d70              LDRB     r0,[r6,r5]
00002e  b900              CBNZ     r0,|L6.50|
;;;902    			{
;;;903    				break;
000030  e002              B        |L6.56|
                  |L6.50|
000032  1c6d              ADDS     r5,r5,#1              ;894
                  |L6.52|
000034  2d10              CMP      r5,#0x10              ;894
000036  d3f5              BCC      |L6.36|
                  |L6.56|
000038  bf00              NOP      
;;;904    			}
;;;905    			else
;;;906    			{
;;;907    				mtCOVERAGE_TEST_MARKER();
;;;908    			}
;;;909    		}
;;;910    
;;;911    		/* Ensure the name string is terminated in the case that the string length
;;;912    		was greater or equal to configMAX_TASK_NAME_LEN. */
;;;913    		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
00003a  2100              MOVS     r1,#0
00003c  2043              MOVS     r0,#0x43
00003e  5501              STRB     r1,[r0,r4]
000040  e002              B        |L6.72|
                  |L6.66|
;;;914    	}
;;;915    	else
;;;916    	{
;;;917    		/* The task has not been given a name, so just ensure there is a NULL
;;;918    		terminator when it is read out. */
;;;919    		pxNewTCB->pcTaskName[ 0 ] = 0x00;
000042  2000              MOVS     r0,#0
000044  f8840034          STRB     r0,[r4,#0x34]
                  |L6.72|
;;;920    	}
;;;921    
;;;922    	/* This is used as an array index so must ensure it's not too large.  First
;;;923    	remove the privilege bit if one is present. */
;;;924    	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000048  2f03              CMP      r7,#3
00004a  d300              BCC      |L6.78|
;;;925    	{
;;;926    		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00004c  2702              MOVS     r7,#2
                  |L6.78|
;;;927    	}
;;;928    	else
;;;929    	{
;;;930    		mtCOVERAGE_TEST_MARKER();
;;;931    	}
;;;932    
;;;933    	pxNewTCB->uxPriority = uxPriority;
00004e  62e7              STR      r7,[r4,#0x2c]
;;;934    	#if ( configUSE_MUTEXES == 1 )
;;;935    	{
;;;936    		pxNewTCB->uxBasePriority = uxPriority;
000050  6467              STR      r7,[r4,#0x44]
;;;937    		pxNewTCB->uxMutexesHeld = 0;
000052  2000              MOVS     r0,#0
000054  64a0              STR      r0,[r4,#0x48]
;;;938    	}
;;;939    	#endif /* configUSE_MUTEXES */
;;;940    
;;;941    	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
000056  1d20              ADDS     r0,r4,#4
000058  f7fffffe          BL       vListInitialiseItem
;;;942    	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
00005c  f1040018          ADD      r0,r4,#0x18
000060  f7fffffe          BL       vListInitialiseItem
;;;943    
;;;944    	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
;;;945    	back to	the containing TCB from a generic item in a list. */
;;;946    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
000064  6124              STR      r4,[r4,#0x10]
;;;947    
;;;948    	/* Event lists are always in priority order. */
;;;949    	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000066  f1c70003          RSB      r0,r7,#3
00006a  61a0              STR      r0,[r4,#0x18]
;;;950    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
00006c  6264              STR      r4,[r4,#0x24]
;;;951    
;;;952    	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;953    	{
;;;954    		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;955    	}
;;;956    	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;957    
;;;958    	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;959    	{
;;;960    		pxNewTCB->pxTaskTag = NULL;
;;;961    	}
;;;962    	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;963    
;;;964    	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;965    	{
;;;966    		pxNewTCB->ulRunTimeCounter = 0UL;
;;;967    	}
;;;968    	#endif /* configGENERATE_RUN_TIME_STATS */
;;;969    
;;;970    	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;971    	{
;;;972    		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
;;;973    	}
;;;974    	#else
;;;975    	{
;;;976    		/* Avoid compiler warning about unreferenced parameter. */
;;;977    		( void ) xRegions;
;;;978    	}
;;;979    	#endif
;;;980    
;;;981    	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;982    	{
;;;983    		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;984    		{
;;;985    			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;986    		}
;;;987    	}
;;;988    	#endif
;;;989    
;;;990    	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;991    	{
;;;992    		pxNewTCB->ulNotifiedValue = 0;
00006e  2000              MOVS     r0,#0
000070  64e0              STR      r0,[r4,#0x4c]
;;;993    		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000072  f8840050          STRB     r0,[r4,#0x50]
;;;994    	}
;;;995    	#endif
;;;996    
;;;997    	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;998    	{
;;;999    		/* Initialise this task's Newlib reent structure.
;;;1000   		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
;;;1001   		for additional information. */
;;;1002   		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
;;;1003   	}
;;;1004   	#endif
;;;1005   
;;;1006   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;1007   	{
;;;1008   		pxNewTCB->ucDelayAborted = pdFALSE;
;;;1009   	}
;;;1010   	#endif
;;;1011   
;;;1012   	/* Initialize the TCB stack to look as if the task was already running,
;;;1013   	but had been interrupted by the scheduler.  The return address is set
;;;1014   	to the start of the task function. Once the stack has been initialised
;;;1015   	the top of stack variable is updated. */
;;;1016   	#if( portUSING_MPU_WRAPPERS == 1 )
;;;1017   	{
;;;1018   		/* If the port has capability to detect stack overflow,
;;;1019   		pass the stack end address to the stack initialization
;;;1020   		function as well. */
;;;1021   		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
;;;1022   		{
;;;1023   			#if( portSTACK_GROWTH < 0 )
;;;1024   			{
;;;1025   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1026   			}
;;;1027   			#else /* portSTACK_GROWTH */
;;;1028   			{
;;;1029   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1030   			}
;;;1031   			#endif /* portSTACK_GROWTH */
;;;1032   		}
;;;1033   		#else /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1034   		{
;;;1035   			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1036   		}
;;;1037   		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1038   	}
;;;1039   	#else /* portUSING_MPU_WRAPPERS */
;;;1040   	{
;;;1041   		/* If the port has capability to detect stack overflow,
;;;1042   		pass the stack end address to the stack initialization
;;;1043   		function as well. */
;;;1044   		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
;;;1045   		{
;;;1046   			#if( portSTACK_GROWTH < 0 )
;;;1047   			{
;;;1048   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
;;;1049   			}
;;;1050   			#else /* portSTACK_GROWTH */
;;;1051   			{
;;;1052   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCode, pvParameters );
;;;1053   			}
;;;1054   			#endif /* portSTACK_GROWTH */
;;;1055   		}
;;;1056   		#else /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1057   		{
;;;1058   			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
000076  4641              MOV      r1,r8
000078  4658              MOV      r0,r11
00007a  9a03              LDR      r2,[sp,#0xc]
00007c  f7fffffe          BL       pxPortInitialiseStack
000080  6020              STR      r0,[r4,#0]
;;;1059   		}
;;;1060   		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1061   	}
;;;1062   	#endif /* portUSING_MPU_WRAPPERS */
;;;1063   
;;;1064   	if( pxCreatedTask != NULL )
000082  f1ba0f00          CMP      r10,#0
000086  d001              BEQ      |L6.140|
;;;1065   	{
;;;1066   		/* Pass the handle out in an anonymous way.  The handle can be used to
;;;1067   		change the created task's priority, delete the created task, etc.*/
;;;1068   		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
000088  f8ca4000          STR      r4,[r10,#0]
                  |L6.140|
;;;1069   	}
;;;1070   	else
;;;1071   	{
;;;1072   		mtCOVERAGE_TEST_MARKER();
;;;1073   	}
;;;1074   }
00008c  e8bd9fff          POP      {r0-r12,pc}
;;;1075   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseTaskLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseTaskLists PROC
;;;3606   
;;;3607   static void prvInitialiseTaskLists( void )
000000  b510              PUSH     {r4,lr}
;;;3608   {
;;;3609   UBaseType_t uxPriority;
;;;3610   
;;;3611   	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L7.22|
                  |L7.6|
;;;3612   	{
;;;3613   		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a0d              LDR      r2,|L7.64|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;3611
                  |L7.22|
000016  2c03              CMP      r4,#3                 ;3611
000018  d3f5              BCC      |L7.6|
;;;3614   	}
;;;3615   
;;;3616   	vListInitialise( &xDelayedTaskList1 );
00001a  480a              LDR      r0,|L7.68|
00001c  f7fffffe          BL       vListInitialise
;;;3617   	vListInitialise( &xDelayedTaskList2 );
000020  4809              LDR      r0,|L7.72|
000022  f7fffffe          BL       vListInitialise
;;;3618   	vListInitialise( &xPendingReadyList );
000026  4809              LDR      r0,|L7.76|
000028  f7fffffe          BL       vListInitialise
;;;3619   
;;;3620   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3621   	{
;;;3622   		vListInitialise( &xTasksWaitingTermination );
;;;3623   	}
;;;3624   	#endif /* INCLUDE_vTaskDelete */
;;;3625   
;;;3626   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;3627   	{
;;;3628   		vListInitialise( &xSuspendedTaskList );
00002c  4808              LDR      r0,|L7.80|
00002e  f7fffffe          BL       vListInitialise
;;;3629   	}
;;;3630   	#endif /* INCLUDE_vTaskSuspend */
;;;3631   
;;;3632   	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
;;;3633   	using list2. */
;;;3634   	pxDelayedTaskList = &xDelayedTaskList1;
000032  4804              LDR      r0,|L7.68|
000034  4907              LDR      r1,|L7.84|
000036  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
;;;3635   	pxOverflowDelayedTaskList = &xDelayedTaskList2;
000038  4803              LDR      r0,|L7.72|
00003a  4907              LDR      r1,|L7.88|
00003c  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedTaskList
;;;3636   }
00003e  bd10              POP      {r4,pc}
;;;3637   /*-----------------------------------------------------------*/
                          ENDP

                  |L7.64|
                          DCD      pxReadyTasksLists
                  |L7.68|
                          DCD      xDelayedTaskList1
                  |L7.72|
                          DCD      xDelayedTaskList2
                  |L7.76|
                          DCD      xPendingReadyList
                  |L7.80|
                          DCD      xSuspendedTaskList
                  |L7.84|
                          DCD      pxDelayedTaskList
                  |L7.88|
                          DCD      pxOverflowDelayedTaskList

                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3942   
;;;3943   static void prvResetNextTaskUnblockTime( void )
000000  490a              LDR      r1,|L8.44|
;;;3944   {
;;;3945   TCB_t *pxTCB;
;;;3946   
;;;3947   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b909              CBNZ     r1,|L8.12|
000008  2101              MOVS     r1,#1
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  2100              MOVS     r1,#0
                  |L8.14|
00000e  b121              CBZ      r1,|L8.26|
;;;3948   	{
;;;3949   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3950   		the maximum possible value so it is	extremely unlikely that the
;;;3951   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3952   		there is an item in the delayed list. */
;;;3953   		xNextTaskUnblockTime = portMAX_DELAY;
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4a06              LDR      r2,|L8.48|
000016  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
000018  e006              B        |L8.40|
                  |L8.26|
;;;3954   	}
;;;3955   	else
;;;3956   	{
;;;3957   		/* The new current delayed list is not empty, get the value of
;;;3958   		the item at the head of the delayed list.  This is the time at
;;;3959   		which the task at the head of the delayed list should be removed
;;;3960   		from the Blocked state. */
;;;3961   		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00001e  68c9              LDR      r1,[r1,#0xc]
000020  68c8              LDR      r0,[r1,#0xc]
;;;3962   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
000022  4a03              LDR      r2,|L8.48|
000024  6841              LDR      r1,[r0,#4]
000026  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
                  |L8.40|
;;;3963   	}
;;;3964   }
000028  4770              BX       lr
;;;3965   /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      pxDelayedTaskList
                  |L8.48|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1804   
;;;1805   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1806   	{
000002  4601              MOV      r1,r0
;;;1807   	BaseType_t xReturn = pdFALSE;
000004  2000              MOVS     r0,#0
;;;1808   	const TCB_t * const pxTCB = xTask;
000006  460a              MOV      r2,r1
;;;1809   
;;;1810   		/* Accesses xPendingReadyList so must be called from a critical
;;;1811   		section. */
;;;1812   
;;;1813   		/* It does not make sense to check if the calling task is suspended. */
;;;1814   		configASSERT( xTask );
;;;1815   
;;;1816   		/* Is the task being resumed actually in the suspended list? */
;;;1817   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
000008  4c0b              LDR      r4,|L9.56|
00000a  6953              LDR      r3,[r2,#0x14]
00000c  42a3              CMP      r3,r4
00000e  d101              BNE      |L9.20|
000010  2301              MOVS     r3,#1
000012  e000              B        |L9.22|
                  |L9.20|
000014  2300              MOVS     r3,#0
                  |L9.22|
000016  b173              CBZ      r3,|L9.54|
;;;1818   		{
;;;1819   			/* Has the task already been resumed from within an ISR? */
;;;1820   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
000018  4c08              LDR      r4,|L9.60|
00001a  6a93              LDR      r3,[r2,#0x28]
00001c  42a3              CMP      r3,r4
00001e  d101              BNE      |L9.36|
000020  2301              MOVS     r3,#1
000022  e000              B        |L9.38|
                  |L9.36|
000024  2300              MOVS     r3,#0
                  |L9.38|
000026  b933              CBNZ     r3,|L9.54|
;;;1821   			{
;;;1822   				/* Is it in the suspended list because it is in the	Suspended
;;;1823   				state, or because is is blocked with no timeout? */
;;;1824   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
000028  6a93              LDR      r3,[r2,#0x28]
00002a  b90b              CBNZ     r3,|L9.48|
00002c  2301              MOVS     r3,#1
00002e  e000              B        |L9.50|
                  |L9.48|
000030  2300              MOVS     r3,#0
                  |L9.50|
000032  b103              CBZ      r3,|L9.54|
;;;1825   				{
;;;1826   					xReturn = pdTRUE;
000034  2001              MOVS     r0,#1
                  |L9.54|
;;;1827   				}
;;;1828   				else
;;;1829   				{
;;;1830   					mtCOVERAGE_TEST_MARKER();
;;;1831   				}
;;;1832   			}
;;;1833   			else
;;;1834   			{
;;;1835   				mtCOVERAGE_TEST_MARKER();
;;;1836   			}
;;;1837   		}
;;;1838   		else
;;;1839   		{
;;;1840   			mtCOVERAGE_TEST_MARKER();
;;;1841   		}
;;;1842   
;;;1843   		return xReturn;
;;;1844   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
000036  bd10              POP      {r4,pc}
;;;1845   
                          ENDP

                  |L9.56|
                          DCD      xSuspendedTaskList
                  |L9.60|
                          DCD      xPendingReadyList

                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;4617   
;;;4618   	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
000000  4806              LDR      r0,|L10.28|
;;;4619   	{
;;;4620   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;4621   		then pxCurrentTCB will be NULL. */
;;;4622   		if( pxCurrentTCB != NULL )
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000004  b130              CBZ      r0,|L10.20|
;;;4623   		{
;;;4624   			( pxCurrentTCB->uxMutexesHeld )++;
000006  4905              LDR      r1,|L10.28|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  f1010048          ADD      r0,r1,#0x48
00000e  6c89              LDR      r1,[r1,#0x48]
000010  1c49              ADDS     r1,r1,#1
000012  6001              STR      r1,[r0,#0]
                  |L10.20|
;;;4625   		}
;;;4626   
;;;4627   		return pxCurrentTCB;
000014  4801              LDR      r0,|L10.28|
000016  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;4628   	}
000018  4770              BX       lr
;;;4629   
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      pxCurrentTCB

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;4634   
;;;4635   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;4636   	{
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4637   	uint32_t ulReturn;
;;;4638   
;;;4639   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;4640   		{
;;;4641   			/* Only block if the notification count is not already non-zero. */
;;;4642   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000a  4818              LDR      r0,|L11.108|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  6cc0              LDR      r0,[r0,#0x4c]
000010  b988              CBNZ     r0,|L11.54|
;;;4643   			{
;;;4644   				/* Mark this task as waiting for a notification. */
;;;4645   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000012  2001              MOVS     r0,#1
000014  4915              LDR      r1,|L11.108|
000016  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000018  f8810050          STRB     r0,[r1,#0x50]
;;;4646   
;;;4647   				if( xTicksToWait > ( TickType_t ) 0 )
00001c  b15d              CBZ      r5,|L11.54|
;;;4648   				{
;;;4649   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001e  2101              MOVS     r1,#1
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4650   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;4651   
;;;4652   					/* All ports are written to allow a yield in a critical
;;;4653   					section (some will yield immediately, others wait until the
;;;4654   					critical section exits) - but it is not something that
;;;4655   					application code should ever do. */
;;;4656   					portYIELD_WITHIN_API();
000026  f04f5080          MOV      r0,#0x10000000
00002a  4911              LDR      r1,|L11.112|
00002c  6008              STR      r0,[r1,#0]
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
                  |L11.54|
;;;4657   				}
;;;4658   				else
;;;4659   				{
;;;4660   					mtCOVERAGE_TEST_MARKER();
;;;4661   				}
;;;4662   			}
;;;4663   			else
;;;4664   			{
;;;4665   				mtCOVERAGE_TEST_MARKER();
;;;4666   			}
;;;4667   		}
;;;4668   		taskEXIT_CRITICAL();
000036  f7fffffe          BL       vPortExitCritical
;;;4669   
;;;4670   		taskENTER_CRITICAL();
00003a  f7fffffe          BL       vPortEnterCritical
;;;4671   		{
;;;4672   			traceTASK_NOTIFY_TAKE();
;;;4673   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00003e  480b              LDR      r0,|L11.108|
000040  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000042  6cc4              LDR      r4,[r0,#0x4c]
;;;4674   
;;;4675   			if( ulReturn != 0UL )
000044  b14c              CBZ      r4,|L11.90|
;;;4676   			{
;;;4677   				if( xClearCountOnExit != pdFALSE )
000046  b126              CBZ      r6,|L11.82|
;;;4678   				{
;;;4679   					pxCurrentTCB->ulNotifiedValue = 0UL;
000048  2000              MOVS     r0,#0
00004a  4908              LDR      r1,|L11.108|
00004c  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00004e  64c8              STR      r0,[r1,#0x4c]
000050  e003              B        |L11.90|
                  |L11.82|
;;;4680   				}
;;;4681   				else
;;;4682   				{
;;;4683   					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
000052  1e60              SUBS     r0,r4,#1
000054  4905              LDR      r1,|L11.108|
000056  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000058  64c8              STR      r0,[r1,#0x4c]
                  |L11.90|
;;;4684   				}
;;;4685   			}
;;;4686   			else
;;;4687   			{
;;;4688   				mtCOVERAGE_TEST_MARKER();
;;;4689   			}
;;;4690   
;;;4691   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00005a  2000              MOVS     r0,#0
00005c  4903              LDR      r1,|L11.108|
00005e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000060  f8810050          STRB     r0,[r1,#0x50]
;;;4692   		}
;;;4693   		taskEXIT_CRITICAL();
000064  f7fffffe          BL       vPortExitCritical
;;;4694   
;;;4695   		return ulReturn;
000068  4620              MOV      r0,r4
;;;4696   	}
00006a  bd70              POP      {r4-r6,pc}
;;;4697   
                          ENDP

                  |L11.108|
                          DCD      pxCurrentTCB
                  |L11.112|
                          DCD      0xe000ed04

                          AREA ||i.ulTaskNotifyValueClear||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyValueClear PROC
;;;5142   
;;;5143   	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5144   	{
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;5145   	TCB_t *pxTCB;
;;;5146   	uint32_t ulReturn;
;;;5147   
;;;5148   		/* If null is passed in here then it is the calling task that is having
;;;5149   		its notification state cleared. */
;;;5150   		pxTCB = prvGetTCBFromHandle( xTask );
000008  b914              CBNZ     r4,|L12.16|
00000a  4809              LDR      r0,|L12.48|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L12.18|
                  |L12.16|
000010  4620              MOV      r0,r4
                  |L12.18|
000012  4606              MOV      r6,r0
;;;5151   
;;;5152   		taskENTER_CRITICAL();
000014  f7fffffe          BL       vPortEnterCritical
;;;5153   		{
;;;5154   			/* Return the notification as it was before the bits were cleared,
;;;5155   			then clear the bit mask. */
;;;5156   			ulReturn = pxCurrentTCB->ulNotifiedValue;
000018  4805              LDR      r0,|L12.48|
00001a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00001c  6cc7              LDR      r7,[r0,#0x4c]
;;;5157   			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
00001e  6cf0              LDR      r0,[r6,#0x4c]
000020  43a8              BICS     r0,r0,r5
000022  64f0              STR      r0,[r6,#0x4c]
;;;5158   		}
;;;5159   		taskEXIT_CRITICAL();
000024  f7fffffe          BL       vPortExitCritical
;;;5160   
;;;5161   		return ulReturn;
000028  4638              MOV      r0,r7
;;;5162   	}
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;5163   
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;2349   
;;;2350   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L13.8|
;;;2351   {
;;;2352   	/* A critical section is not required because the variables are of type
;;;2353   	BaseType_t. */
;;;2354   	return uxCurrentNumberOfTasks;
000002  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
;;;2355   }
000004  4770              BX       lr
;;;2356   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1477   
;;;1478   	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1479   	{
000002  4604              MOV      r4,r0
;;;1480   	TCB_t const *pxTCB;
;;;1481   	UBaseType_t uxReturn;
;;;1482   
;;;1483   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1484   		{
;;;1485   			/* If null is passed in here then it is the priority of the task
;;;1486   			that called uxTaskPriorityGet() that is being queried. */
;;;1487   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b914              CBNZ     r4,|L14.16|
00000a  4805              LDR      r0,|L14.32|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L14.18|
                  |L14.16|
000010  4620              MOV      r0,r4
                  |L14.18|
000012  4606              MOV      r6,r0
;;;1488   			uxReturn = pxTCB->uxPriority;
000014  6af5              LDR      r5,[r6,#0x2c]
;;;1489   		}
;;;1490   		taskEXIT_CRITICAL();
000016  f7fffffe          BL       vPortExitCritical
;;;1491   
;;;1492   		return uxReturn;
00001a  4628              MOV      r0,r5
;;;1493   	}
00001c  bd70              POP      {r4-r6,pc}
;;;1494   
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1499   
;;;1500   	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1501   	{
000002  4602              MOV      r2,r0
;;;1502   	TCB_t const *pxTCB;
;;;1503   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1504   
;;;1505   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1506   		maximum	system call (or maximum API call) interrupt priority.
;;;1507   		Interrupts that are	above the maximum system call priority are keep
;;;1508   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1509   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1510   		is defined in FreeRTOSConfig.h then
;;;1511   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1512   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1513   		been assigned a priority above the configured maximum system call
;;;1514   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1515   		from interrupts	that have been assigned a priority at or (logically)
;;;1516   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1517   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1518   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1519   		provided on the following link:
;;;1520   		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1521   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1522   
;;;1523   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
000004  bf00              NOP      
000006  25bf              MOVS     r5,#0xbf
000008  f3ef8411          MRS      r4,BASEPRI
00000c  f3858811          MSR      BASEPRI,r5
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  4621              MOV      r1,r4
;;;1524   		{
;;;1525   			/* If null is passed in here then it is the priority of the calling
;;;1526   			task that is being queried. */
;;;1527   			pxTCB = prvGetTCBFromHandle( xTask );
00001c  b912              CBNZ     r2,|L15.36|
00001e  4c05              LDR      r4,|L15.52|
000020  6824              LDR      r4,[r4,#0]  ; pxCurrentTCB
000022  e000              B        |L15.38|
                  |L15.36|
000024  4614              MOV      r4,r2
                  |L15.38|
000026  4623              MOV      r3,r4
;;;1528   			uxReturn = pxTCB->uxPriority;
000028  6ad8              LDR      r0,[r3,#0x2c]
;;;1529   		}
;;;1530   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
00002a  bf00              NOP      
00002c  f3818811          MSR      BASEPRI,r1
000030  bf00              NOP      
;;;1531   
;;;1532   		return uxReturn;
;;;1533   	}
000032  bd70              POP      {r4-r6,pc}
;;;1534   
                          ENDP

                  |L15.52|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;4601   
;;;4602   TickType_t uxTaskResetEventItemValue( void )
000000  4905              LDR      r1,|L16.24|
;;;4603   {
;;;4604   TickType_t uxReturn;
;;;4605   
;;;4606   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000004  6988              LDR      r0,[r1,#0x18]
;;;4607   
;;;4608   	/* Reset the event list item to its normal value - so it can be used with
;;;4609   	queues and semaphores. */
;;;4610   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000006  4904              LDR      r1,|L16.24|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  6ac9              LDR      r1,[r1,#0x2c]
00000c  f1c10103          RSB      r1,r1,#3
000010  4a01              LDR      r2,|L16.24|
000012  6812              LDR      r2,[r2,#0]  ; pxCurrentTCB
000014  6191              STR      r1,[r2,#0x18]
;;;4611   
;;;4612   	return uxReturn;
;;;4613   }
000016  4770              BX       lr
;;;4614   /*-----------------------------------------------------------*/
                          ENDP

                  |L16.24|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;1340   
;;;1341   	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;1342   	{
000002  4604              MOV      r4,r0
;;;1343   	BaseType_t xAlreadyYielded = pdFALSE;
000004  2500              MOVS     r5,#0
;;;1344   
;;;1345   		/* A delay time of zero just forces a reschedule. */
;;;1346   		if( xTicksToDelay > ( TickType_t ) 0U )
000006  b144              CBZ      r4,|L17.26|
;;;1347   		{
;;;1348   			configASSERT( uxSchedulerSuspended == 0 );
;;;1349   			vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;1350   			{
;;;1351   				traceTASK_DELAY();
;;;1352   
;;;1353   				/* A task that is removed from the event list while the
;;;1354   				scheduler is suspended will not get placed in the ready
;;;1355   				list or removed from the blocked list until the scheduler
;;;1356   				is resumed.
;;;1357   
;;;1358   				This task cannot be in an event list as it is the currently
;;;1359   				executing task. */
;;;1360   				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;1361   			}
;;;1362   			xAlreadyYielded = xTaskResumeAll();
000014  f7fffffe          BL       xTaskResumeAll
000018  4605              MOV      r5,r0
                  |L17.26|
;;;1363   		}
;;;1364   		else
;;;1365   		{
;;;1366   			mtCOVERAGE_TEST_MARKER();
;;;1367   		}
;;;1368   
;;;1369   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1370   		have put ourselves to sleep. */
;;;1371   		if( xAlreadyYielded == pdFALSE )
00001a  b93d              CBNZ     r5,|L17.44|
;;;1372   		{
;;;1373   			portYIELD_WITHIN_API();
00001c  f04f5080          MOV      r0,#0x10000000
000020  4903              LDR      r1,|L17.48|
000022  6008              STR      r0,[r1,#0]
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
                  |L17.44|
;;;1374   		}
;;;1375   		else
;;;1376   		{
;;;1377   			mtCOVERAGE_TEST_MARKER();
;;;1378   		}
;;;1379   	}
00002c  bd70              POP      {r4-r6,pc}
;;;1380   
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;1256   
;;;1257   	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1258   	{
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1259   	TickType_t xTimeToWake;
;;;1260   	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;1261   
;;;1262   		configASSERT( pxPreviousWakeTime );
;;;1263   		configASSERT( ( xTimeIncrement > 0U ) );
;;;1264   		configASSERT( uxSchedulerSuspended == 0 );
;;;1265   
;;;1266   		vTaskSuspendAll();
00000c  f7fffffe          BL       vTaskSuspendAll
;;;1267   		{
;;;1268   			/* Minor optimisation.  The tick count cannot change in this
;;;1269   			block. */
;;;1270   			const TickType_t xConstTickCount = xTickCount;
000010  4816              LDR      r0,|L18.108|
000012  6806              LDR      r6,[r0,#0]  ; xTickCount
;;;1271   
;;;1272   			/* Generate the tick time at which the task wants to wake. */
;;;1273   			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000014  6820              LDR      r0,[r4,#0]
000016  eb000508          ADD      r5,r0,r8
;;;1274   
;;;1275   			if( xConstTickCount < *pxPreviousWakeTime )
00001a  6820              LDR      r0,[r4,#0]
00001c  42b0              CMP      r0,r6
00001e  d907              BLS      |L18.48|
;;;1276   			{
;;;1277   				/* The tick count has overflowed since this function was
;;;1278   				lasted called.  In this case the only time we should ever
;;;1279   				actually delay is if the wake time has also	overflowed,
;;;1280   				and the wake time is greater than the tick time.  When this
;;;1281   				is the case it is as if neither time had overflowed. */
;;;1282   				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
000020  6820              LDR      r0,[r4,#0]
000022  42a8              CMP      r0,r5
000024  d90b              BLS      |L18.62|
000026  42b5              CMP      r5,r6
000028  d909              BLS      |L18.62|
;;;1283   				{
;;;1284   					xShouldDelay = pdTRUE;
00002a  f04f0901          MOV      r9,#1
00002e  e006              B        |L18.62|
                  |L18.48|
;;;1285   				}
;;;1286   				else
;;;1287   				{
;;;1288   					mtCOVERAGE_TEST_MARKER();
;;;1289   				}
;;;1290   			}
;;;1291   			else
;;;1292   			{
;;;1293   				/* The tick time has not overflowed.  In this case we will
;;;1294   				delay if either the wake time has overflowed, and/or the
;;;1295   				tick time is less than the wake time. */
;;;1296   				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
000030  6820              LDR      r0,[r4,#0]
000032  42a8              CMP      r0,r5
000034  d801              BHI      |L18.58|
000036  42b5              CMP      r5,r6
000038  d901              BLS      |L18.62|
                  |L18.58|
;;;1297   				{
;;;1298   					xShouldDelay = pdTRUE;
00003a  f04f0901          MOV      r9,#1
                  |L18.62|
;;;1299   				}
;;;1300   				else
;;;1301   				{
;;;1302   					mtCOVERAGE_TEST_MARKER();
;;;1303   				}
;;;1304   			}
;;;1305   
;;;1306   			/* Update the wake time ready for the next call. */
;;;1307   			*pxPreviousWakeTime = xTimeToWake;
00003e  6025              STR      r5,[r4,#0]
;;;1308   
;;;1309   			if( xShouldDelay != pdFALSE )
000040  f1b90f00          CMP      r9,#0
000044  d003              BEQ      |L18.78|
;;;1310   			{
;;;1311   				traceTASK_DELAY_UNTIL( xTimeToWake );
;;;1312   
;;;1313   				/* prvAddCurrentTaskToDelayedList() needs the block time, not
;;;1314   				the time to wake, so subtract the current tick count. */
;;;1315   				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
000046  1ba8              SUBS     r0,r5,r6
000048  2100              MOVS     r1,#0
00004a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L18.78|
;;;1316   			}
;;;1317   			else
;;;1318   			{
;;;1319   				mtCOVERAGE_TEST_MARKER();
;;;1320   			}
;;;1321   		}
;;;1322   		xAlreadyYielded = xTaskResumeAll();
00004e  f7fffffe          BL       xTaskResumeAll
000052  4607              MOV      r7,r0
;;;1323   
;;;1324   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1325   		have put ourselves to sleep. */
;;;1326   		if( xAlreadyYielded == pdFALSE )
000054  b93f              CBNZ     r7,|L18.102|
;;;1327   		{
;;;1328   			portYIELD_WITHIN_API();
000056  f04f5080          MOV      r0,#0x10000000
00005a  4905              LDR      r1,|L18.112|
00005c  6008              STR      r0,[r1,#0]
00005e  f3bf8f4f          DSB      
000062  f3bf8f6f          ISB      
                  |L18.102|
;;;1329   		}
;;;1330   		else
;;;1331   		{
;;;1332   			mtCOVERAGE_TEST_MARKER();
;;;1333   		}
;;;1334   	}
000066  e8bd87f0          POP      {r4-r10,pc}
;;;1335   
                          ENDP

00006a  0000              DCW      0x0000
                  |L18.108|
                          DCD      xTickCount
                  |L18.112|
                          DCD      0xe000ed04

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;2098   
;;;2099   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;2100   {
;;;2101   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;2102   	routine so the original ISRs can be restored if necessary.  The port
;;;2103   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;2104   	portDISABLE_INTERRUPTS();
000002  bf00              NOP      
000004  20bf              MOVS     r0,#0xbf
000006  f3808811          MSR      BASEPRI,r0
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
000012  bf00              NOP      
;;;2105   	xSchedulerRunning = pdFALSE;
000014  2000              MOVS     r0,#0
000016  4902              LDR      r1,|L19.32|
000018  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;2106   	vPortEndScheduler();
00001a  f7fffffe          BL       vPortEndScheduler
;;;2107   }
00001e  bd10              POP      {r4,pc}
;;;2108   /*----------------------------------------------------------*/
                          ENDP

                  |L19.32|
                          DCD      xSchedulerRunning

                          AREA ||i.vTaskInternalSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskInternalSetTimeOutState PROC
;;;3265   
;;;3266   void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  4903              LDR      r1,|L20.16|
;;;3267   {
;;;3268   	/* For internal use only as it does not use a critical section. */
;;;3269   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000002  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000004  6001              STR      r1,[r0,#0]
;;;3270   	pxTimeOut->xTimeOnEntering = xTickCount;
000006  4903              LDR      r1,|L20.20|
000008  6809              LDR      r1,[r1,#0]  ; xTickCount
00000a  6041              STR      r1,[r0,#4]
;;;3271   }
00000c  4770              BX       lr
;;;3272   /*-----------------------------------------------------------*/
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      xNumOfOverflows
                  |L20.20|
                          DCD      xTickCount

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;3336   
;;;3337   void vTaskMissedYield( void )
000000  2001              MOVS     r0,#1
;;;3338   {
;;;3339   	xYieldPending = pdTRUE;
000002  4901              LDR      r1,|L21.8|
000004  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;3340   }
000006  4770              BX       lr
;;;3341   /*-----------------------------------------------------------*/
                          ENDP

                  |L21.8|
                          DCD      xYieldPending

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;5025   
;;;5026   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5027   	{
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;5028   	TCB_t * pxTCB;
;;;5029   	uint8_t ucOriginalNotifyState;
;;;5030   	UBaseType_t uxSavedInterruptStatus;
;;;5031   
;;;5032   		configASSERT( xTaskToNotify );
;;;5033   
;;;5034   		/* RTOS ports that support interrupt nesting have the concept of a
;;;5035   		maximum	system call (or maximum API call) interrupt priority.
;;;5036   		Interrupts that are	above the maximum system call priority are keep
;;;5037   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;5038   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;5039   		is defined in FreeRTOSConfig.h then
;;;5040   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;5041   		failure if a FreeRTOS API function is called from an interrupt that has
;;;5042   		been assigned a priority above the configured maximum system call
;;;5043   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;5044   		from interrupts	that have been assigned a priority at or (logically)
;;;5045   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;5046   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;5047   		simple as possible.  More information (albeit Cortex-M specific) is
;;;5048   		provided on the following link:
;;;5049   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;5050   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;5051   
;;;5052   		pxTCB = xTaskToNotify;
000008  462c              MOV      r4,r5
;;;5053   
;;;5054   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  bf00              NOP      
00000c  21bf              MOVS     r1,#0xbf
00000e  f3ef8011          MRS      r0,BASEPRI
000012  f3818811          MSR      BASEPRI,r1
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  4607              MOV      r7,r0
;;;5055   		{
;;;5056   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000022  f8948050          LDRB     r8,[r4,#0x50]
;;;5057   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000026  2002              MOVS     r0,#2
000028  f8840050          STRB     r0,[r4,#0x50]
;;;5058   
;;;5059   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;5060   			semaphore. */
;;;5061   			( pxTCB->ulNotifiedValue )++;
00002c  6ce0              LDR      r0,[r4,#0x4c]
00002e  1c40              ADDS     r0,r0,#1
000030  64e0              STR      r0,[r4,#0x4c]
;;;5062   
;;;5063   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;5064   
;;;5065   			/* If the task is in the blocked state specifically to wait for a
;;;5066   			notification then unblock it now. */
;;;5067   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000032  f1b80f01          CMP      r8,#1
000036  d129              BNE      |L22.140|
;;;5068   			{
;;;5069   				/* The task should not have been on an event list. */
;;;5070   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;5071   
;;;5072   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000038  4817              LDR      r0,|L22.152|
00003a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00003c  b9a8              CBNZ     r0,|L22.106|
;;;5073   				{
;;;5074   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00003e  1d20              ADDS     r0,r4,#4
000040  f7fffffe          BL       uxListRemove
;;;5075   					prvAddTaskToReadyList( pxTCB );
000044  f894102c          LDRB     r1,[r4,#0x2c]
000048  2001              MOVS     r0,#1
00004a  4088              LSLS     r0,r0,r1
00004c  4913              LDR      r1,|L22.156|
00004e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000050  4308              ORRS     r0,r0,r1
000052  4912              LDR      r1,|L22.156|
000054  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000056  6ae1              LDR      r1,[r4,#0x2c]
000058  eb010181          ADD      r1,r1,r1,LSL #2
00005c  4a10              LDR      r2,|L22.160|
00005e  eb020081          ADD      r0,r2,r1,LSL #2
000062  1d21              ADDS     r1,r4,#4
000064  f7fffffe          BL       vListInsertEnd
000068  e004              B        |L22.116|
                  |L22.106|
;;;5076   				}
;;;5077   				else
;;;5078   				{
;;;5079   					/* The delayed and ready lists cannot be accessed, so hold
;;;5080   					this task pending until the scheduler is resumed. */
;;;5081   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
00006a  f1040118          ADD      r1,r4,#0x18
00006e  480d              LDR      r0,|L22.164|
000070  f7fffffe          BL       vListInsertEnd
                  |L22.116|
;;;5082   				}
;;;5083   
;;;5084   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000074  490c              LDR      r1,|L22.168|
000076  6ae0              LDR      r0,[r4,#0x2c]
000078  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00007a  6ac9              LDR      r1,[r1,#0x2c]
00007c  4288              CMP      r0,r1
00007e  d905              BLS      |L22.140|
;;;5085   				{
;;;5086   					/* The notified task has a priority above the currently
;;;5087   					executing task so a yield is required. */
;;;5088   					if( pxHigherPriorityTaskWoken != NULL )
000080  b10e              CBZ      r6,|L22.134|
;;;5089   					{
;;;5090   						*pxHigherPriorityTaskWoken = pdTRUE;
000082  2001              MOVS     r0,#1
000084  6030              STR      r0,[r6,#0]
                  |L22.134|
;;;5091   					}
;;;5092   
;;;5093   					/* Mark that a yield is pending in case the user is not
;;;5094   					using the "xHigherPriorityTaskWoken" parameter in an ISR
;;;5095   					safe FreeRTOS function. */
;;;5096   					xYieldPending = pdTRUE;
000086  2001              MOVS     r0,#1
000088  4908              LDR      r1,|L22.172|
00008a  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L22.140|
;;;5097   				}
;;;5098   				else
;;;5099   				{
;;;5100   					mtCOVERAGE_TEST_MARKER();
;;;5101   				}
;;;5102   			}
;;;5103   		}
;;;5104   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00008c  bf00              NOP      
00008e  f3878811          MSR      BASEPRI,r7
000092  bf00              NOP      
;;;5105   	}
000094  e8bd81f0          POP      {r4-r8,pc}
;;;5106   
                          ENDP

                  |L22.152|
                          DCD      uxSchedulerSuspended
                  |L22.156|
                          DCD      uxTopReadyPriority
                  |L22.160|
                          DCD      pxReadyTasksLists
                  |L22.164|
                          DCD      xPendingReadyList
                  |L22.168|
                          DCD      pxCurrentTCB
                  |L22.172|
                          DCD      xYieldPending

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;3063   
;;;3064   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3065   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3066   	configASSERT( pxEventList );
;;;3067   
;;;3068   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;3069   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;3070   
;;;3071   	/* Place the event list item of the TCB in the appropriate event list.
;;;3072   	This is placed in the list in priority order so the highest priority task
;;;3073   	is the first to be woken by the event.  The queue that contains the event
;;;3074   	list is locked, preventing simultaneous access from interrupts. */
;;;3075   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000006  4805              LDR      r0,|L23.28|
000008  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
00000a  3118              ADDS     r1,r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       vListInsert
;;;3076   
;;;3077   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3078   }
00001a  bd70              POP      {r4-r6,pc}
;;;3079   /*-----------------------------------------------------------*/
                          ENDP

                  |L23.28|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;3080   
;;;3081   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3082   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;3083   	configASSERT( pxEventList );
;;;3084   
;;;3085   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;3086   	the event groups implementation. */
;;;3087   	configASSERT( uxSchedulerSuspended != 0 );
;;;3088   
;;;3089   	/* Store the item value in the event list item.  It is safe to access the
;;;3090   	event list item here as interrupts won't access the event list item of a
;;;3091   	task that is not in the Blocked state. */
;;;3092   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000008  f0444000          ORR      r0,r4,#0x80000000
00000c  4906              LDR      r1,|L24.40|
00000e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000010  6188              STR      r0,[r1,#0x18]
;;;3093   
;;;3094   	/* Place the event list item of the TCB at the end of the appropriate event
;;;3095   	list.  It is safe to access the event list here because it is part of an
;;;3096   	event group implementation - and interrupts don't access event groups
;;;3097   	directly (instead they access them indirectly by pending function calls to
;;;3098   	the task level). */
;;;3099   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000012  4805              LDR      r0,|L24.40|
000014  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000016  3118              ADDS     r1,r1,#0x18
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       vListInsertEnd
;;;3100   
;;;3101   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001e  2101              MOVS     r1,#1
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3102   }
000026  bd70              POP      {r4-r6,pc}
;;;3103   /*-----------------------------------------------------------*/
                          ENDP

                  |L24.40|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPriorityDisinheritAfterTimeout||, CODE, READONLY, ALIGN=2

                  vTaskPriorityDisinheritAfterTimeout PROC
;;;4183   
;;;4184   	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4185   	{
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;4186   	TCB_t * const pxTCB = pxMutexHolder;
000008  4634              MOV      r4,r6
;;;4187   	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
;;;4188   	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
00000a  f04f0901          MOV      r9,#1
;;;4189   
;;;4190   		if( pxMutexHolder != NULL )
00000e  2e00              CMP      r6,#0
000010  d040              BEQ      |L25.148|
;;;4191   		{
;;;4192   			/* If pxMutexHolder is not NULL then the holder must hold at least
;;;4193   			one mutex. */
;;;4194   			configASSERT( pxTCB->uxMutexesHeld );
;;;4195   
;;;4196   			/* Determine the priority to which the priority of the task that
;;;4197   			holds the mutex should be set.  This will be the greater of the
;;;4198   			holding task's base priority and the priority of the highest
;;;4199   			priority task that is waiting to obtain the mutex. */
;;;4200   			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
000012  6c60              LDR      r0,[r4,#0x44]
000014  42b8              CMP      r0,r7
000016  d201              BCS      |L25.28|
;;;4201   			{
;;;4202   				uxPriorityToUse = uxHighestPriorityWaitingTask;
000018  463d              MOV      r5,r7
00001a  e000              B        |L25.30|
                  |L25.28|
;;;4203   			}
;;;4204   			else
;;;4205   			{
;;;4206   				uxPriorityToUse = pxTCB->uxBasePriority;
00001c  6c65              LDR      r5,[r4,#0x44]
                  |L25.30|
;;;4207   			}
;;;4208   
;;;4209   			/* Does the priority need to change? */
;;;4210   			if( pxTCB->uxPriority != uxPriorityToUse )
00001e  6ae0              LDR      r0,[r4,#0x2c]
000020  42a8              CMP      r0,r5
000022  d037              BEQ      |L25.148|
;;;4211   			{
;;;4212   				/* Only disinherit if no other mutexes are held.  This is a
;;;4213   				simplification in the priority inheritance implementation.  If
;;;4214   				the task that holds the mutex is also holding other mutexes then
;;;4215   				the other mutexes may have caused the priority inheritance. */
;;;4216   				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
000024  6ca0              LDR      r0,[r4,#0x48]
000026  2801              CMP      r0,#1
000028  d134              BNE      |L25.148|
;;;4217   				{
;;;4218   					/* If a task has timed out because it already holds the
;;;4219   					mutex it was trying to obtain then it cannot of inherited
;;;4220   					its own priority. */
;;;4221   					configASSERT( pxTCB != pxCurrentTCB );
;;;4222   
;;;4223   					/* Disinherit the priority, remembering the previous
;;;4224   					priority to facilitate determining the subject task's
;;;4225   					state. */
;;;4226   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;4227   					uxPriorityUsedOnEntry = pxTCB->uxPriority;
00002a  f8d4802c          LDR      r8,[r4,#0x2c]
;;;4228   					pxTCB->uxPriority = uxPriorityToUse;
00002e  62e5              STR      r5,[r4,#0x2c]
;;;4229   
;;;4230   					/* Only reset the event list item value if the value is not
;;;4231   					being used for anything else. */
;;;4232   					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000030  69a0              LDR      r0,[r4,#0x18]
000032  f0004000          AND      r0,r0,#0x80000000
000036  b910              CBNZ     r0,|L25.62|
;;;4233   					{
;;;4234   						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000038  f1c50003          RSB      r0,r5,#3
00003c  61a0              STR      r0,[r4,#0x18]
                  |L25.62|
;;;4235   					}
;;;4236   					else
;;;4237   					{
;;;4238   						mtCOVERAGE_TEST_MARKER();
;;;4239   					}
;;;4240   
;;;4241   					/* If the running task is not the task that holds the mutex
;;;4242   					then the task that holds the mutex could be in either the
;;;4243   					Ready, Blocked or Suspended states.  Only remove the task
;;;4244   					from its current state list if it is in the Ready state as
;;;4245   					the task's priority is going to change and there is one
;;;4246   					Ready list per priority. */
;;;4247   					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
00003e  eb080188          ADD      r1,r8,r8,LSL #2
000042  4a15              LDR      r2,|L25.152|
000044  eb020181          ADD      r1,r2,r1,LSL #2
000048  6960              LDR      r0,[r4,#0x14]
00004a  4288              CMP      r0,r1
00004c  d101              BNE      |L25.82|
00004e  2001              MOVS     r0,#1
000050  e000              B        |L25.84|
                  |L25.82|
000052  2000              MOVS     r0,#0
                  |L25.84|
000054  b1f0              CBZ      r0,|L25.148|
;;;4248   					{
;;;4249   						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000056  1d20              ADDS     r0,r4,#4
000058  f7fffffe          BL       uxListRemove
00005c  b940              CBNZ     r0,|L25.112|
;;;4250   						{
;;;4251   							/* It is known that the task is in its ready list so
;;;4252   							there is no need to check again and the port level
;;;4253   							reset macro can be called directly. */
;;;4254   							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
00005e  f894102c          LDRB     r1,[r4,#0x2c]
000062  2001              MOVS     r0,#1
000064  4088              LSLS     r0,r0,r1
000066  490d              LDR      r1,|L25.156|
000068  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00006a  4381              BICS     r1,r1,r0
00006c  480b              LDR      r0,|L25.156|
00006e  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L25.112|
;;;4255   						}
;;;4256   						else
;;;4257   						{
;;;4258   							mtCOVERAGE_TEST_MARKER();
;;;4259   						}
;;;4260   
;;;4261   						prvAddTaskToReadyList( pxTCB );
000070  f894102c          LDRB     r1,[r4,#0x2c]
000074  2001              MOVS     r0,#1
000076  4088              LSLS     r0,r0,r1
000078  4908              LDR      r1,|L25.156|
00007a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00007c  4308              ORRS     r0,r0,r1
00007e  4907              LDR      r1,|L25.156|
000080  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000082  6ae1              LDR      r1,[r4,#0x2c]
000084  eb010181          ADD      r1,r1,r1,LSL #2
000088  4a03              LDR      r2,|L25.152|
00008a  eb020081          ADD      r0,r2,r1,LSL #2
00008e  1d21              ADDS     r1,r4,#4
000090  f7fffffe          BL       vListInsertEnd
                  |L25.148|
;;;4262   					}
;;;4263   					else
;;;4264   					{
;;;4265   						mtCOVERAGE_TEST_MARKER();
;;;4266   					}
;;;4267   				}
;;;4268   				else
;;;4269   				{
;;;4270   					mtCOVERAGE_TEST_MARKER();
;;;4271   				}
;;;4272   			}
;;;4273   			else
;;;4274   			{
;;;4275   				mtCOVERAGE_TEST_MARKER();
;;;4276   			}
;;;4277   		}
;;;4278   		else
;;;4279   		{
;;;4280   			mtCOVERAGE_TEST_MARKER();
;;;4281   		}
;;;4282   	}
000094  e8bd87f0          POP      {r4-r10,pc}
;;;4283   
                          ENDP

                  |L25.152|
                          DCD      pxReadyTasksLists
                  |L25.156|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskRemoveFromUnorderedEventList PROC
;;;3205   
;;;3206   void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;3207   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;3208   TCB_t *pxUnblockedTCB;
;;;3209   
;;;3210   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;3211   	the event flags implementation. */
;;;3212   	configASSERT( uxSchedulerSuspended != pdFALSE );
;;;3213   
;;;3214   	/* Store the new item value in the event list. */
;;;3215   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000006  f0464000          ORR      r0,r6,#0x80000000
00000a  6028              STR      r0,[r5,#0]
;;;3216   
;;;3217   	/* Remove the event list form the event flag.  Interrupts do not access
;;;3218   	event flags. */
;;;3219   	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
00000c  68ec              LDR      r4,[r5,#0xc]
;;;3220   	configASSERT( pxUnblockedTCB );
;;;3221   	( void ) uxListRemove( pxEventListItem );
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       uxListRemove
;;;3222   
;;;3223   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;3224   	{
;;;3225   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;3226   		might be set to the blocked task's time out time.  If the task is
;;;3227   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;3228   		normally left unchanged, because it is automatically reset to a new
;;;3229   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;3230   		tickless idling is used it might be more important to enter sleep mode
;;;3231   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;3232   		ensure it is updated at the earliest possible time. */
;;;3233   		prvResetNextTaskUnblockTime();
;;;3234   	}
;;;3235   	#endif
;;;3236   
;;;3237   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;3238   	scheduler is suspended so interrupts will not be accessing the ready
;;;3239   	lists. */
;;;3240   	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
;;;3241   	prvAddTaskToReadyList( pxUnblockedTCB );
00001a  f894102c          LDRB     r1,[r4,#0x2c]
00001e  2001              MOVS     r0,#1
000020  4088              LSLS     r0,r0,r1
000022  490c              LDR      r1,|L26.84|
000024  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000026  4308              ORRS     r0,r0,r1
000028  490a              LDR      r1,|L26.84|
00002a  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  eb010181          ADD      r1,r1,r1,LSL #2
000032  4a09              LDR      r2,|L26.88|
000034  eb020081          ADD      r0,r2,r1,LSL #2
000038  1d21              ADDS     r1,r4,#4
00003a  f7fffffe          BL       vListInsertEnd
;;;3242   
;;;3243   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00003e  4907              LDR      r1,|L26.92|
000040  6ae0              LDR      r0,[r4,#0x2c]
000042  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000044  6ac9              LDR      r1,[r1,#0x2c]
000046  4288              CMP      r0,r1
000048  d902              BLS      |L26.80|
;;;3244   	{
;;;3245   		/* The unblocked task has a priority above that of the calling task, so
;;;3246   		a context switch is required.  This function is called with the
;;;3247   		scheduler suspended so xYieldPending is set so the context switch
;;;3248   		occurs immediately that the scheduler is resumed (unsuspended). */
;;;3249   		xYieldPending = pdTRUE;
00004a  2001              MOVS     r0,#1
00004c  4904              LDR      r1,|L26.96|
00004e  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L26.80|
;;;3250   	}
;;;3251   }
000050  bd70              POP      {r4-r6,pc}
;;;3252   /*-----------------------------------------------------------*/
                          ENDP

000052  0000              DCW      0x0000
                  |L26.84|
                          DCD      uxTopReadyPriority
                  |L26.88|
                          DCD      pxReadyTasksLists
                  |L26.92|
                          DCD      pxCurrentTCB
                  |L26.96|
                          DCD      xYieldPending

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1850   
;;;1851   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1852   	{
000002  4605              MOV      r5,r0
;;;1853   	TCB_t * const pxTCB = xTaskToResume;
000004  462c              MOV      r4,r5
;;;1854   
;;;1855   		/* It does not make sense to resume the calling task. */
;;;1856   		configASSERT( xTaskToResume );
;;;1857   
;;;1858   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1859   		currently executing task. */
;;;1860   		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
000006  4818              LDR      r0,|L27.104|
000008  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000a  4284              CMP      r4,r0
00000c  d02b              BEQ      |L27.102|
00000e  b354              CBZ      r4,|L27.102|
;;;1861   		{
;;;1862   			taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;1863   			{
;;;1864   				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       prvTaskIsTaskSuspended
00001a  b310              CBZ      r0,|L27.98|
;;;1865   				{
;;;1866   					traceTASK_RESUME( pxTCB );
;;;1867   
;;;1868   					/* The ready list can be accessed even if the scheduler is
;;;1869   					suspended because this is inside a critical section. */
;;;1870   					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
00001c  1d20              ADDS     r0,r4,#4
00001e  f7fffffe          BL       uxListRemove
;;;1871   					prvAddTaskToReadyList( pxTCB );
000022  f894102c          LDRB     r1,[r4,#0x2c]
000026  2001              MOVS     r0,#1
000028  4088              LSLS     r0,r0,r1
00002a  4910              LDR      r1,|L27.108|
00002c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00002e  4308              ORRS     r0,r0,r1
000030  490e              LDR      r1,|L27.108|
000032  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000034  6ae1              LDR      r1,[r4,#0x2c]
000036  eb010181          ADD      r1,r1,r1,LSL #2
00003a  4a0d              LDR      r2,|L27.112|
00003c  eb020081          ADD      r0,r2,r1,LSL #2
000040  1d21              ADDS     r1,r4,#4
000042  f7fffffe          BL       vListInsertEnd
;;;1872   
;;;1873   					/* A higher priority task may have just been resumed. */
;;;1874   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
000046  4908              LDR      r1,|L27.104|
000048  6ae0              LDR      r0,[r4,#0x2c]
00004a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00004c  6ac9              LDR      r1,[r1,#0x2c]
00004e  4288              CMP      r0,r1
000050  d307              BCC      |L27.98|
;;;1875   					{
;;;1876   						/* This yield may not cause the task just resumed to run,
;;;1877   						but will leave the lists in the correct state for the
;;;1878   						next yield. */
;;;1879   						taskYIELD_IF_USING_PREEMPTION();
000052  f04f5080          MOV      r0,#0x10000000
000056  4907              LDR      r1,|L27.116|
000058  6008              STR      r0,[r1,#0]
00005a  f3bf8f4f          DSB      
00005e  f3bf8f6f          ISB      
                  |L27.98|
;;;1880   					}
;;;1881   					else
;;;1882   					{
;;;1883   						mtCOVERAGE_TEST_MARKER();
;;;1884   					}
;;;1885   				}
;;;1886   				else
;;;1887   				{
;;;1888   					mtCOVERAGE_TEST_MARKER();
;;;1889   				}
;;;1890   			}
;;;1891   			taskEXIT_CRITICAL();
000062  f7fffffe          BL       vPortExitCritical
                  |L27.102|
;;;1892   		}
;;;1893   		else
;;;1894   		{
;;;1895   			mtCOVERAGE_TEST_MARKER();
;;;1896   		}
;;;1897   	}
000066  bd70              POP      {r4-r6,pc}
;;;1898   
                          ENDP

                  |L27.104|
                          DCD      pxCurrentTCB
                  |L27.108|
                          DCD      uxTopReadyPriority
                  |L27.112|
                          DCD      pxReadyTasksLists
                  |L27.116|
                          DCD      0xe000ed04

                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;3253   
;;;3254   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  b510              PUSH     {r4,lr}
;;;3255   {
000002  4604              MOV      r4,r0
;;;3256   	configASSERT( pxTimeOut );
;;;3257   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;3258   	{
;;;3259   		pxTimeOut->xOverflowCount = xNumOfOverflows;
000008  4804              LDR      r0,|L28.28|
00000a  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
00000c  6020              STR      r0,[r4,#0]
;;;3260   		pxTimeOut->xTimeOnEntering = xTickCount;
00000e  4804              LDR      r0,|L28.32|
000010  6800              LDR      r0,[r0,#0]  ; xTickCount
000012  6060              STR      r0,[r4,#4]
;;;3261   	}
;;;3262   	taskEXIT_CRITICAL();
000014  f7fffffe          BL       vPortExitCritical
;;;3263   }
000018  bd10              POP      {r4,pc}
;;;3264   /*-----------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L28.28|
                          DCD      xNumOfOverflows
                  |L28.32|
                          DCD      xTickCount

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1974   
;;;1975   void vTaskStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;1976   {
;;;1977   BaseType_t xReturn;
;;;1978   
;;;1979   	/* Add the idle task at the lowest priority. */
;;;1980   	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;1981   	{
;;;1982   		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
;;;1983   		StackType_t *pxIdleTaskStackBuffer = NULL;
;;;1984   		uint32_t ulIdleTaskStackSize;
;;;1985   
;;;1986   		/* The Idle task is created using user provided RAM - obtain the
;;;1987   		address of the RAM then create the idle task. */
;;;1988   		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
;;;1989   		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
;;;1990   												configIDLE_TASK_NAME,
;;;1991   												ulIdleTaskStackSize,
;;;1992   												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
;;;1993   												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
;;;1994   												pxIdleTaskStackBuffer,
;;;1995   												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1996   
;;;1997   		if( xIdleTaskHandle != NULL )
;;;1998   		{
;;;1999   			xReturn = pdPASS;
;;;2000   		}
;;;2001   		else
;;;2002   		{
;;;2003   			xReturn = pdFAIL;
;;;2004   		}
;;;2005   	}
;;;2006   	#else
;;;2007   	{
;;;2008   		/* The Idle task is being created using dynamically allocated RAM. */
;;;2009   		xReturn = xTaskCreate(	prvIdleTask,
000002  4811              LDR      r0,|L29.72|
000004  2100              MOVS     r1,#0
000006  460b              MOV      r3,r1
000008  2280              MOVS     r2,#0x80
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  a10f              ADR      r1,|L29.76|
000010  4810              LDR      r0,|L29.84|
000012  f7fffffe          BL       xTaskCreate
000016  4604              MOV      r4,r0
;;;2010   								configIDLE_TASK_NAME,
;;;2011   								configMINIMAL_STACK_SIZE,
;;;2012   								( void * ) NULL,
;;;2013   								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
;;;2014   								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;2015   	}
;;;2016   	#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;2017   
;;;2018   	#if ( configUSE_TIMERS == 1 )
;;;2019   	{
;;;2020   		if( xReturn == pdPASS )
;;;2021   		{
;;;2022   			xReturn = xTimerCreateTimerTask();
;;;2023   		}
;;;2024   		else
;;;2025   		{
;;;2026   			mtCOVERAGE_TEST_MARKER();
;;;2027   		}
;;;2028   	}
;;;2029   	#endif /* configUSE_TIMERS */
;;;2030   
;;;2031   	if( xReturn == pdPASS )
000018  2c01              CMP      r4,#1
00001a  d114              BNE      |L29.70|
;;;2032   	{
;;;2033   		/* freertos_tasks_c_additions_init() should only be called if the user
;;;2034   		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
;;;2035   		the only macro called by the function. */
;;;2036   		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
;;;2037   		{
;;;2038   			freertos_tasks_c_additions_init();
;;;2039   		}
;;;2040   		#endif
;;;2041   
;;;2042   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;2043   		before or during the call to xPortStartScheduler().  The stacks of
;;;2044   		the created tasks contain a status word with interrupts switched on
;;;2045   		so interrupts will automatically get re-enabled when the first task
;;;2046   		starts to run. */
;;;2047   		portDISABLE_INTERRUPTS();
00001c  bf00              NOP      
00001e  20bf              MOVS     r0,#0xbf
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
00002c  bf00              NOP      
;;;2048   
;;;2049   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2050   		{
;;;2051   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2052   			structure specific to the task that will run first.
;;;2053   			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
;;;2054   			for additional information. */
;;;2055   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2056   		}
;;;2057   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2058   
;;;2059   		xNextTaskUnblockTime = portMAX_DELAY;
00002e  f04f30ff          MOV      r0,#0xffffffff
000032  4909              LDR      r1,|L29.88|
000034  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;2060   		xSchedulerRunning = pdTRUE;
000036  2001              MOVS     r0,#1
000038  4908              LDR      r1,|L29.92|
00003a  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;2061   		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
00003c  2000              MOVS     r0,#0
00003e  4908              LDR      r1,|L29.96|
000040  6008              STR      r0,[r1,#0]  ; xTickCount
;;;2062   
;;;2063   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;2064   		macro must be defined to configure the timer/counter used to generate
;;;2065   		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
;;;2066   		is set to 0 and the following line fails to build then ensure you do not
;;;2067   		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
;;;2068   		FreeRTOSConfig.h file. */
;;;2069   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;2070   
;;;2071   		traceTASK_SWITCHED_IN();
;;;2072   
;;;2073   		/* Setting up the timer tick is hardware specific and thus in the
;;;2074   		portable interface. */
;;;2075   		if( xPortStartScheduler() != pdFALSE )
000042  f7fffffe          BL       xPortStartScheduler
                  |L29.70|
;;;2076   		{
;;;2077   			/* Should not reach here as if the scheduler is running the
;;;2078   			function will not return. */
;;;2079   		}
;;;2080   		else
;;;2081   		{
;;;2082   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;2083   		}
;;;2084   	}
;;;2085   	else
;;;2086   	{
;;;2087   		/* This line will only be reached if the kernel could not be started,
;;;2088   		because there was not enough FreeRTOS heap to create the idle task
;;;2089   		or the timer task. */
;;;2090   		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
;;;2091   	}
;;;2092   
;;;2093   	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
;;;2094   	meaning xIdleTaskHandle is not used anywhere else. */
;;;2095   	( void ) xIdleTaskHandle;
;;;2096   }
000046  bd1c              POP      {r2-r4,pc}
;;;2097   /*-----------------------------------------------------------*/
                          ENDP

                  |L29.72|
                          DCD      xIdleTaskHandle
                  |L29.76|
00004c  49444c45          DCB      "IDLE",0
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L29.84|
                          DCD      prvIdleTask
                  |L29.88|
                          DCD      xNextTaskUnblockTime
                  |L29.92|
                          DCD      xSchedulerRunning
                  |L29.96|
                          DCD      xTickCount

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1703   
;;;1704   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1705   	{
000002  4605              MOV      r5,r0
;;;1706   	TCB_t *pxTCB;
;;;1707   
;;;1708   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1709   		{
;;;1710   			/* If null is passed in here then it is the running task that is
;;;1711   			being suspended. */
;;;1712   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  b915              CBNZ     r5,|L30.16|
00000a  4829              LDR      r0,|L30.176|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L30.18|
                  |L30.16|
000010  4628              MOV      r0,r5
                  |L30.18|
000012  4604              MOV      r4,r0
;;;1713   
;;;1714   			traceTASK_SUSPEND( pxTCB );
;;;1715   
;;;1716   			/* Remove task from the ready/delayed list and place in the
;;;1717   			suspended list. */
;;;1718   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L30.60|
;;;1719   			{
;;;1720   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  4924              LDR      r1,|L30.180|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L30.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  4921              LDR      r1,|L30.184|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  481f              LDR      r0,|L30.184|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L30.60|
;;;1721   			}
;;;1722   			else
;;;1723   			{
;;;1724   				mtCOVERAGE_TEST_MARKER();
;;;1725   			}
;;;1726   
;;;1727   			/* Is the task waiting on an event also? */
;;;1728   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L30.72|
;;;1729   			{
;;;1730   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L30.72|
;;;1731   			}
;;;1732   			else
;;;1733   			{
;;;1734   				mtCOVERAGE_TEST_MARKER();
;;;1735   			}
;;;1736   
;;;1737   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
000048  1d21              ADDS     r1,r4,#4
00004a  481c              LDR      r0,|L30.188|
00004c  f7fffffe          BL       vListInsertEnd
;;;1738   
;;;1739   			#if( configUSE_TASK_NOTIFICATIONS == 1 )
;;;1740   			{
;;;1741   				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000050  f8940050          LDRB     r0,[r4,#0x50]
000054  2801              CMP      r0,#1
000056  d102              BNE      |L30.94|
;;;1742   				{
;;;1743   					/* The task was blocked to wait for a notification, but is
;;;1744   					now suspended, so no notification was received. */
;;;1745   					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000058  2000              MOVS     r0,#0
00005a  f8840050          STRB     r0,[r4,#0x50]
                  |L30.94|
;;;1746   				}
;;;1747   			}
;;;1748   			#endif
;;;1749   		}
;;;1750   		taskEXIT_CRITICAL();
00005e  f7fffffe          BL       vPortExitCritical
;;;1751   
;;;1752   		if( xSchedulerRunning != pdFALSE )
000062  4817              LDR      r0,|L30.192|
000064  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000066  b128              CBZ      r0,|L30.116|
;;;1753   		{
;;;1754   			/* Reset the next expected unblock time in case it referred to the
;;;1755   			task that is now in the Suspended state. */
;;;1756   			taskENTER_CRITICAL();
000068  f7fffffe          BL       vPortEnterCritical
;;;1757   			{
;;;1758   				prvResetNextTaskUnblockTime();
00006c  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;1759   			}
;;;1760   			taskEXIT_CRITICAL();
000070  f7fffffe          BL       vPortExitCritical
                  |L30.116|
;;;1761   		}
;;;1762   		else
;;;1763   		{
;;;1764   			mtCOVERAGE_TEST_MARKER();
;;;1765   		}
;;;1766   
;;;1767   		if( pxTCB == pxCurrentTCB )
000074  480e              LDR      r0,|L30.176|
000076  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000078  4284              CMP      r4,r0
00007a  d117              BNE      |L30.172|
;;;1768   		{
;;;1769   			if( xSchedulerRunning != pdFALSE )
00007c  4810              LDR      r0,|L30.192|
00007e  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000080  b140              CBZ      r0,|L30.148|
;;;1770   			{
;;;1771   				/* The current task has just been suspended. */
;;;1772   				configASSERT( uxSchedulerSuspended == 0 );
;;;1773   				portYIELD_WITHIN_API();
000082  f04f5080          MOV      r0,#0x10000000
000086  490f              LDR      r1,|L30.196|
000088  6008              STR      r0,[r1,#0]
00008a  f3bf8f4f          DSB      
00008e  f3bf8f6f          ISB      
000092  e00b              B        |L30.172|
                  |L30.148|
;;;1774   			}
;;;1775   			else
;;;1776   			{
;;;1777   				/* The scheduler is not running, but the task that was pointed
;;;1778   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1779   				must be adjusted to point to a different task. */
;;;1780   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
000094  4809              LDR      r0,|L30.188|
000096  6800              LDR      r0,[r0,#0]  ; xSuspendedTaskList
000098  490b              LDR      r1,|L30.200|
00009a  6809              LDR      r1,[r1,#0]  ; uxCurrentNumberOfTasks
00009c  4288              CMP      r0,r1
00009e  d103              BNE      |L30.168|
;;;1781   				{
;;;1782   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1783   					NULL so when the next task is created pxCurrentTCB will
;;;1784   					be set to point to it no matter what its relative priority
;;;1785   					is. */
;;;1786   					pxCurrentTCB = NULL;
0000a0  2000              MOVS     r0,#0
0000a2  4903              LDR      r1,|L30.176|
0000a4  6008              STR      r0,[r1,#0]  ; pxCurrentTCB
0000a6  e001              B        |L30.172|
                  |L30.168|
;;;1787   				}
;;;1788   				else
;;;1789   				{
;;;1790   					vTaskSwitchContext();
0000a8  f7fffffe          BL       vTaskSwitchContext
                  |L30.172|
;;;1791   				}
;;;1792   			}
;;;1793   		}
;;;1794   		else
;;;1795   		{
;;;1796   			mtCOVERAGE_TEST_MARKER();
;;;1797   		}
;;;1798   	}
0000ac  bd70              POP      {r4-r6,pc}
;;;1799   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L30.176|
                          DCD      pxCurrentTCB
                  |L30.180|
                          DCD      pxReadyTasksLists
                  |L30.184|
                          DCD      uxTopReadyPriority
                  |L30.188|
                          DCD      xSuspendedTaskList
                  |L30.192|
                          DCD      xSchedulerRunning
                  |L30.196|
                          DCD      0xe000ed04
                  |L30.200|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;2109   
;;;2110   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L31.12|
;;;2111   {
;;;2112   	/* A critical section is not required as the variable is of type
;;;2113   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;2114   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;2115   	http://goo.gl/wu4acr */
;;;2116   
;;;2117   	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
;;;2118   	do not otherwise exhibit real time behaviour. */
;;;2119   	portSOFTWARE_BARRIER();
;;;2120   
;;;2121   	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
;;;2122   	is used to allow calls to vTaskSuspendAll() to nest. */
;;;2123   	++uxSchedulerSuspended;
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L31.12|
000008  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;2124   
;;;2125   	/* Enforces ordering for ports and optimised compilers that may otherwise place
;;;2126   	the above increment elsewhere. */
;;;2127   	portMEMORY_BARRIER();
;;;2128   }
00000a  4770              BX       lr
;;;2129   /*----------------------------------------------------------*/
                          ENDP

                  |L31.12|
                          DCD      uxSchedulerSuspended

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2988   
;;;2989   void vTaskSwitchContext( void )
000000  4812              LDR      r0,|L32.76|
;;;2990   {
;;;2991   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  b118              CBZ      r0,|L32.14|
;;;2992   	{
;;;2993   		/* The scheduler is currently suspended - do not allow a context
;;;2994   		switch. */
;;;2995   		xYieldPending = pdTRUE;
000006  2001              MOVS     r0,#1
000008  4911              LDR      r1,|L32.80|
00000a  6008              STR      r0,[r1,#0]  ; xYieldPending
00000c  e01d              B        |L32.74|
                  |L32.14|
;;;2996   	}
;;;2997   	else
;;;2998   	{
;;;2999   		xYieldPending = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  490f              LDR      r1,|L32.80|
000012  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;3000   		traceTASK_SWITCHED_OUT();
;;;3001   
;;;3002   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;3003   		{
;;;3004   			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;3005   				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;3006   			#else
;;;3007   				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;3008   			#endif
;;;3009   
;;;3010   			/* Add the amount of time the task has been running to the
;;;3011   			accumulated time so far.  The time the task started running was
;;;3012   			stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;3013   			protection here so count values are only valid until the timer
;;;3014   			overflows.  The guard against negative values is to protect
;;;3015   			against suspect run time stat counter implementations - which
;;;3016   			are provided by the application, not the kernel. */
;;;3017   			if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;3018   			{
;;;3019   				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;3020   			}
;;;3021   			else
;;;3022   			{
;;;3023   				mtCOVERAGE_TEST_MARKER();
;;;3024   			}
;;;3025   			ulTaskSwitchedInTime = ulTotalRunTime;
;;;3026   		}
;;;3027   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;3028   
;;;3029   		/* Check for stack overflow, if configured. */
;;;3030   		taskCHECK_FOR_STACK_OVERFLOW();
;;;3031   
;;;3032   		/* Before the currently running task is switched out, save its errno. */
;;;3033   		#if( configUSE_POSIX_ERRNO == 1 )
;;;3034   		{
;;;3035   			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
;;;3036   		}
;;;3037   		#endif
;;;3038   
;;;3039   		/* Select a new task to run using either the generic C or port
;;;3040   		optimised asm code. */
;;;3041   		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000014  480f              LDR      r0,|L32.84|
000016  6800              LDR      r0,[r0,#0]  ; uxTopReadyPriority
000018  fab0f080          CLZ      r0,r0
00001c  f1c0011f          RSB      r1,r0,#0x1f
000020  eb010281          ADD      r2,r1,r1,LSL #2
000024  4b0c              LDR      r3,|L32.88|
000026  eb030082          ADD      r0,r3,r2,LSL #2
00002a  6842              LDR      r2,[r0,#4]
00002c  6852              LDR      r2,[r2,#4]
00002e  6042              STR      r2,[r0,#4]
000030  f1000208          ADD      r2,r0,#8
000034  6843              LDR      r3,[r0,#4]
000036  4293              CMP      r3,r2
000038  d102              BNE      |L32.64|
00003a  6842              LDR      r2,[r0,#4]
00003c  6852              LDR      r2,[r2,#4]
00003e  6042              STR      r2,[r0,#4]
                  |L32.64|
000040  6842              LDR      r2,[r0,#4]
000042  68d2              LDR      r2,[r2,#0xc]
000044  4b05              LDR      r3,|L32.92|
000046  601a              STR      r2,[r3,#0]  ; pxCurrentTCB
000048  bf00              NOP      
                  |L32.74|
;;;3042   		traceTASK_SWITCHED_IN();
;;;3043   
;;;3044   		/* After the new task is switched in, update the global errno. */
;;;3045   		#if( configUSE_POSIX_ERRNO == 1 )
;;;3046   		{
;;;3047   			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
;;;3048   		}
;;;3049   		#endif
;;;3050   
;;;3051   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3052   		{
;;;3053   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;3054   			structure specific to this task.
;;;3055   			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
;;;3056   			for additional information. */
;;;3057   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;3058   		}
;;;3059   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3060   	}
;;;3061   }
00004a  4770              BX       lr
;;;3062   /*-----------------------------------------------------------*/
                          ENDP

                  |L32.76|
                          DCD      uxSchedulerSuspended
                  |L32.80|
                          DCD      xYieldPending
                  |L32.84|
                          DCD      uxTopReadyPriority
                  |L32.88|
                          DCD      pxReadyTasksLists
                  |L32.92|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskCatchUpTicks||, CODE, READONLY, ALIGN=2

                  xTaskCatchUpTicks PROC
;;;2608   
;;;2609   BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
000000  b570              PUSH     {r4-r6,lr}
;;;2610   {
000002  4604              MOV      r4,r0
;;;2611   BaseType_t xYieldRequired = pdFALSE;
000004  2500              MOVS     r5,#0
;;;2612   
;;;2613   	/* Must not be called with the scheduler suspended as the implementation
;;;2614   	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
;;;2615   	configASSERT( uxSchedulerSuspended == 0 );
;;;2616   
;;;2617   	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
;;;2618   	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
;;;2619   	vTaskSuspendAll();
000006  f7fffffe          BL       vTaskSuspendAll
;;;2620   	xPendedTicks += xTicksToCatchUp;
00000a  4805              LDR      r0,|L33.32|
00000c  6800              LDR      r0,[r0,#0]  ; xPendedTicks
00000e  4420              ADD      r0,r0,r4
000010  4903              LDR      r1,|L33.32|
000012  6008              STR      r0,[r1,#0]  ; xPendedTicks
;;;2621   	xYieldRequired = xTaskResumeAll();
000014  f7fffffe          BL       xTaskResumeAll
000018  4605              MOV      r5,r0
;;;2622   
;;;2623   	return xYieldRequired;
00001a  4628              MOV      r0,r5
;;;2624   }
00001c  bd70              POP      {r4-r6,pc}
;;;2625   /*----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L33.32|
                          DCD      xPendedTicks

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;3273   
;;;3274   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3275   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3276   BaseType_t xReturn;
;;;3277   
;;;3278   	configASSERT( pxTimeOut );
;;;3279   	configASSERT( pxTicksToWait );
;;;3280   
;;;3281   	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;3282   	{
;;;3283   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;3284   		const TickType_t xConstTickCount = xTickCount;
00000a  4812              LDR      r0,|L34.84|
00000c  6802              LDR      r2,[r0,#0]  ; xTickCount
;;;3285   		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
00000e  6870              LDR      r0,[r6,#4]
000010  1a13              SUBS     r3,r2,r0
;;;3286   
;;;3287   		#if( INCLUDE_xTaskAbortDelay == 1 )
;;;3288   			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
;;;3289   			{
;;;3290   				/* The delay was aborted, which is not the same as a time out,
;;;3291   				but has the same result. */
;;;3292   				pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;3293   				xReturn = pdTRUE;
;;;3294   			}
;;;3295   			else
;;;3296   		#endif
;;;3297   
;;;3298   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3299   			if( *pxTicksToWait == portMAX_DELAY )
000012  6820              LDR      r0,[r4,#0]
000014  1c40              ADDS     r0,r0,#1
000016  b908              CBNZ     r0,|L34.28|
;;;3300   			{
;;;3301   				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
;;;3302   				specified is the maximum block time then the task should block
;;;3303   				indefinitely, and therefore never time out. */
;;;3304   				xReturn = pdFALSE;
000018  2500              MOVS     r5,#0
00001a  e017              B        |L34.76|
                  |L34.28|
;;;3305   			}
;;;3306   			else
;;;3307   		#endif
;;;3308   
;;;3309   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00001c  490e              LDR      r1,|L34.88|
00001e  6830              LDR      r0,[r6,#0]
000020  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000022  4288              CMP      r0,r1
000024  d004              BEQ      |L34.48|
000026  6870              LDR      r0,[r6,#4]
000028  4290              CMP      r0,r2
00002a  d801              BHI      |L34.48|
;;;3310   		{
;;;3311   			/* The tick count is greater than the time at which
;;;3312   			vTaskSetTimeout() was called, but has also overflowed since
;;;3313   			vTaskSetTimeOut() was called.  It must have wrapped all the way
;;;3314   			around and gone past again. This passed since vTaskSetTimeout()
;;;3315   			was called. */
;;;3316   			xReturn = pdTRUE;
00002c  2501              MOVS     r5,#1
00002e  e00d              B        |L34.76|
                  |L34.48|
;;;3317   		}
;;;3318   		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
000030  6820              LDR      r0,[r4,#0]
000032  4298              CMP      r0,r3
000034  d907              BLS      |L34.70|
;;;3319   		{
;;;3320   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;3321   			*pxTicksToWait -= xElapsedTime;
000036  6820              LDR      r0,[r4,#0]
000038  1ac0              SUBS     r0,r0,r3
00003a  6020              STR      r0,[r4,#0]
;;;3322   			vTaskInternalSetTimeOutState( pxTimeOut );
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       vTaskInternalSetTimeOutState
;;;3323   			xReturn = pdFALSE;
000042  2500              MOVS     r5,#0
000044  e002              B        |L34.76|
                  |L34.70|
;;;3324   		}
;;;3325   		else
;;;3326   		{
;;;3327   			*pxTicksToWait = 0;
000046  2000              MOVS     r0,#0
000048  6020              STR      r0,[r4,#0]
;;;3328   			xReturn = pdTRUE;
00004a  2501              MOVS     r5,#1
                  |L34.76|
;;;3329   		}
;;;3330   	}
;;;3331   	taskEXIT_CRITICAL();
00004c  f7fffffe          BL       vPortExitCritical
;;;3332   
;;;3333   	return xReturn;
000050  4628              MOV      r0,r5
;;;3334   }
000052  bd70              POP      {r4-r6,pc}
;;;3335   /*-----------------------------------------------------------*/
                          ENDP

                  |L34.84|
                          DCD      xTickCount
                  |L34.88|
                          DCD      xNumOfOverflows

                          AREA ||i.xTaskCreate||, CODE, READONLY, ALIGN=1

                  xTaskCreate PROC
;;;732    
;;;733    	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;734    							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;735    							const configSTACK_DEPTH_TYPE usStackDepth,
;;;736    							void * const pvParameters,
;;;737    							UBaseType_t uxPriority,
;;;738    							TaskHandle_t * const pxCreatedTask )
;;;739    	{
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4617              MOV      r7,r2
00000c  e9ddab12          LDRD     r10,r11,[sp,#0x48]
;;;740    	TCB_t *pxNewTCB;
;;;741    	BaseType_t xReturn;
;;;742    
;;;743    		/* If the stack grows down then allocate the stack then the TCB so the stack
;;;744    		does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;745    		the TCB then the stack. */
;;;746    		#if( portSTACK_GROWTH > 0 )
;;;747    		{
;;;748    			/* Allocate space for the TCB.  Where the memory comes from depends on
;;;749    			the implementation of the port malloc function and whether or not static
;;;750    			allocation is being used. */
;;;751    			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;752    
;;;753    			if( pxNewTCB != NULL )
;;;754    			{
;;;755    				/* Allocate space for the stack used by the task being created.
;;;756    				The base of the stack memory stored in the TCB so the task can
;;;757    				be deleted later if required. */
;;;758    				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;759    
;;;760    				if( pxNewTCB->pxStack == NULL )
;;;761    				{
;;;762    					/* Could not allocate the stack.  Delete the allocated TCB. */
;;;763    					vPortFree( pxNewTCB );
;;;764    					pxNewTCB = NULL;
;;;765    				}
;;;766    			}
;;;767    		}
;;;768    		#else /* portSTACK_GROWTH */
;;;769    		{
;;;770    		StackType_t *pxStack;
;;;771    
;;;772    			/* Allocate space for the stack used by the task being created. */
;;;773    			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
000010  00b8              LSLS     r0,r7,#2
000012  f7fffffe          BL       pvPortMalloc
000016  4606              MOV      r6,r0
;;;774    
;;;775    			if( pxStack != NULL )
000018  b156              CBZ      r6,|L35.48|
;;;776    			{
;;;777    				/* Allocate space for the TCB. */
;;;778    				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
00001a  2054              MOVS     r0,#0x54
00001c  f7fffffe          BL       pvPortMalloc
000020  4604              MOV      r4,r0
;;;779    
;;;780    				if( pxNewTCB != NULL )
000022  b10c              CBZ      r4,|L35.40|
;;;781    				{
;;;782    					/* Store the stack location in the TCB. */
;;;783    					pxNewTCB->pxStack = pxStack;
000024  6326              STR      r6,[r4,#0x30]
000026  e004              B        |L35.50|
                  |L35.40|
;;;784    				}
;;;785    				else
;;;786    				{
;;;787    					/* The stack cannot be used as the TCB was not created.  Free
;;;788    					it again. */
;;;789    					vPortFree( pxStack );
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       vPortFree
00002e  e000              B        |L35.50|
                  |L35.48|
;;;790    				}
;;;791    			}
;;;792    			else
;;;793    			{
;;;794    				pxNewTCB = NULL;
000030  2400              MOVS     r4,#0
                  |L35.50|
;;;795    			}
;;;796    		}
;;;797    		#endif /* portSTACK_GROWTH */
;;;798    
;;;799    		if( pxNewTCB != NULL )
000032  b17c              CBZ      r4,|L35.84|
;;;800    		{
;;;801    			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
;;;802    			{
;;;803    				/* Tasks can be created statically or dynamically, so note this
;;;804    				task was created dynamically in case it is later deleted. */
;;;805    				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
;;;806    			}
;;;807    			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
;;;808    
;;;809    			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
000034  2000              MOVS     r0,#0
000036  e9cdab00          STRD     r10,r11,[sp,#0]
00003a  e9cd4002          STRD     r4,r0,[sp,#8]
00003e  463a              MOV      r2,r7
000040  4649              MOV      r1,r9
000042  4640              MOV      r0,r8
000044  9b08              LDR      r3,[sp,#0x20]
000046  f7fffffe          BL       prvInitialiseNewTask
;;;810    			prvAddNewTaskToReadyList( pxNewTCB );
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       prvAddNewTaskToReadyList
;;;811    			xReturn = pdPASS;
000050  2501              MOVS     r5,#1
000052  e001              B        |L35.88|
                  |L35.84|
;;;812    		}
;;;813    		else
;;;814    		{
;;;815    			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
000054  f04f35ff          MOV      r5,#0xffffffff
                  |L35.88|
;;;816    		}
;;;817    
;;;818    		return xReturn;
000058  4628              MOV      r0,r5
;;;819    	}
00005a  b009              ADD      sp,sp,#0x24
00005c  e8bd8ff0          POP      {r4-r11,pc}
;;;820    
                          ENDP


                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4782   
;;;4783   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4784   	{
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;4785   	TCB_t * pxTCB;
;;;4786   	BaseType_t xReturn = pdPASS;
00000c  f04f0a01          MOV      r10,#1
;;;4787   	uint8_t ucOriginalNotifyState;
;;;4788   
;;;4789   		configASSERT( xTaskToNotify );
;;;4790   		pxTCB = xTaskToNotify;
000010  464c              MOV      r4,r9
;;;4791   
;;;4792   		taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;4793   		{
;;;4794   			if( pulPreviousNotificationValue != NULL )
000016  b10f              CBZ      r7,|L36.28|
;;;4795   			{
;;;4796   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000018  6ce0              LDR      r0,[r4,#0x4c]
00001a  6038              STR      r0,[r7,#0]
                  |L36.28|
;;;4797   			}
;;;4798   
;;;4799   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00001c  f8948050          LDRB     r8,[r4,#0x50]
;;;4800   
;;;4801   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000020  2002              MOVS     r0,#2
000022  f8840050          STRB     r0,[r4,#0x50]
;;;4802   
;;;4803   			switch( eAction )
000026  2e05              CMP      r6,#5
000028  d217              BCS      |L36.90|
00002a  e8dff006          TBB      [pc,r6]
00002e  1503              DCB      0x15,0x03
000030  070b0d00          DCB      0x07,0x0b,0x0d,0x00
;;;4804   			{
;;;4805   				case eSetBits	:
;;;4806   					pxTCB->ulNotifiedValue |= ulValue;
000034  6ce0              LDR      r0,[r4,#0x4c]
000036  4328              ORRS     r0,r0,r5
000038  64e0              STR      r0,[r4,#0x4c]
;;;4807   					break;
00003a  e00f              B        |L36.92|
;;;4808   
;;;4809   				case eIncrement	:
;;;4810   					( pxTCB->ulNotifiedValue )++;
00003c  6ce0              LDR      r0,[r4,#0x4c]
00003e  1c40              ADDS     r0,r0,#1
000040  64e0              STR      r0,[r4,#0x4c]
;;;4811   					break;
000042  e00b              B        |L36.92|
;;;4812   
;;;4813   				case eSetValueWithOverwrite	:
;;;4814   					pxTCB->ulNotifiedValue = ulValue;
000044  64e5              STR      r5,[r4,#0x4c]
;;;4815   					break;
000046  e009              B        |L36.92|
;;;4816   
;;;4817   				case eSetValueWithoutOverwrite :
;;;4818   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000048  f1b80f02          CMP      r8,#2
00004c  d001              BEQ      |L36.82|
;;;4819   					{
;;;4820   						pxTCB->ulNotifiedValue = ulValue;
00004e  64e5              STR      r5,[r4,#0x4c]
000050  e001              B        |L36.86|
                  |L36.82|
;;;4821   					}
;;;4822   					else
;;;4823   					{
;;;4824   						/* The value could not be written to the task. */
;;;4825   						xReturn = pdFAIL;
000052  f04f0a00          MOV      r10,#0
                  |L36.86|
;;;4826   					}
;;;4827   					break;
000056  e001              B        |L36.92|
;;;4828   
;;;4829   				case eNoAction:
;;;4830   					/* The task is being notified without its notify value being
;;;4831   					updated. */
;;;4832   					break;
000058  e000              B        |L36.92|
                  |L36.90|
;;;4833   
;;;4834   				default:
;;;4835   					/* Should not get here if all enums are handled.
;;;4836   					Artificially force an assert by testing a value the
;;;4837   					compiler can't assume is const. */
;;;4838   					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
;;;4839   
;;;4840   					break;
00005a  bf00              NOP      
                  |L36.92|
00005c  bf00              NOP                            ;4807
;;;4841   			}
;;;4842   
;;;4843   			traceTASK_NOTIFY();
;;;4844   
;;;4845   			/* If the task is in the blocked state specifically to wait for a
;;;4846   			notification then unblock it now. */
;;;4847   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
00005e  f1b80f01          CMP      r8,#1
000062  d122              BNE      |L36.170|
;;;4848   			{
;;;4849   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000064  1d20              ADDS     r0,r4,#4
000066  f7fffffe          BL       uxListRemove
;;;4850   				prvAddTaskToReadyList( pxTCB );
00006a  f894102c          LDRB     r1,[r4,#0x2c]
00006e  2001              MOVS     r0,#1
000070  4088              LSLS     r0,r0,r1
000072  4910              LDR      r1,|L36.180|
000074  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000076  4308              ORRS     r0,r0,r1
000078  490e              LDR      r1,|L36.180|
00007a  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00007c  6ae1              LDR      r1,[r4,#0x2c]
00007e  eb010181          ADD      r1,r1,r1,LSL #2
000082  4a0d              LDR      r2,|L36.184|
000084  eb020081          ADD      r0,r2,r1,LSL #2
000088  1d21              ADDS     r1,r4,#4
00008a  f7fffffe          BL       vListInsertEnd
;;;4851   
;;;4852   				/* The task should not have been on an event list. */
;;;4853   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4854   
;;;4855   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4856   				{
;;;4857   					/* If a task is blocked waiting for a notification then
;;;4858   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4859   					out time.  If the task is unblocked for a reason other than
;;;4860   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4861   					because it will automatically get reset to a new value when
;;;4862   					the tick count equals xNextTaskUnblockTime.  However if
;;;4863   					tickless idling is used it might be more important to enter
;;;4864   					sleep mode at the earliest possible time - so reset
;;;4865   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4866   					earliest possible time. */
;;;4867   					prvResetNextTaskUnblockTime();
;;;4868   				}
;;;4869   				#endif
;;;4870   
;;;4871   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
00008e  490b              LDR      r1,|L36.188|
000090  6ae0              LDR      r0,[r4,#0x2c]
000092  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000094  6ac9              LDR      r1,[r1,#0x2c]
000096  4288              CMP      r0,r1
000098  d907              BLS      |L36.170|
;;;4872   				{
;;;4873   					/* The notified task has a priority above the currently
;;;4874   					executing task so a yield is required. */
;;;4875   					taskYIELD_IF_USING_PREEMPTION();
00009a  f04f5080          MOV      r0,#0x10000000
00009e  4908              LDR      r1,|L36.192|
0000a0  6008              STR      r0,[r1,#0]
0000a2  f3bf8f4f          DSB      
0000a6  f3bf8f6f          ISB      
                  |L36.170|
;;;4876   				}
;;;4877   				else
;;;4878   				{
;;;4879   					mtCOVERAGE_TEST_MARKER();
;;;4880   				}
;;;4881   			}
;;;4882   			else
;;;4883   			{
;;;4884   				mtCOVERAGE_TEST_MARKER();
;;;4885   			}
;;;4886   		}
;;;4887   		taskEXIT_CRITICAL();
0000aa  f7fffffe          BL       vPortExitCritical
;;;4888   
;;;4889   		return xReturn;
0000ae  4650              MOV      r0,r10
;;;4890   	}
0000b0  e8bd87f0          POP      {r4-r10,pc}
;;;4891   
                          ENDP

                  |L36.180|
                          DCD      uxTopReadyPriority
                  |L36.184|
                          DCD      pxReadyTasksLists
                  |L36.188|
                          DCD      pxCurrentTCB
                  |L36.192|
                          DCD      0xe000ed04

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4896   
;;;4897   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;4898   	{
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;4899   	TCB_t * pxTCB;
;;;4900   	uint8_t ucOriginalNotifyState;
;;;4901   	BaseType_t xReturn = pdPASS;
000010  2001              MOVS     r0,#1
000012  9000              STR      r0,[sp,#0]
;;;4902   	UBaseType_t uxSavedInterruptStatus;
;;;4903   
;;;4904   		configASSERT( xTaskToNotify );
;;;4905   
;;;4906   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4907   		maximum	system call (or maximum API call) interrupt priority.
;;;4908   		Interrupts that are	above the maximum system call priority are keep
;;;4909   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4910   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4911   		is defined in FreeRTOSConfig.h then
;;;4912   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4913   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4914   		been assigned a priority above the configured maximum system call
;;;4915   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4916   		from interrupts	that have been assigned a priority at or (logically)
;;;4917   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4918   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4919   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4920   		provided on the following link:
;;;4921   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4922   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4923   
;;;4924   		pxTCB = xTaskToNotify;
000014  4654              MOV      r4,r10
;;;4925   
;;;4926   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000016  bf00              NOP      
000018  21bf              MOVS     r1,#0xbf
00001a  f3ef8011          MRS      r0,BASEPRI
00001e  f3818811          MSR      BASEPRI,r1
000022  f3bf8f4f          DSB      
000026  f3bf8f6f          ISB      
00002a  bf00              NOP      
00002c  4681              MOV      r9,r0
;;;4927   		{
;;;4928   			if( pulPreviousNotificationValue != NULL )
00002e  b10f              CBZ      r7,|L37.52|
;;;4929   			{
;;;4930   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000030  6ce0              LDR      r0,[r4,#0x4c]
000032  6038              STR      r0,[r7,#0]
                  |L37.52|
;;;4931   			}
;;;4932   
;;;4933   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000034  f8948050          LDRB     r8,[r4,#0x50]
;;;4934   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000038  2002              MOVS     r0,#2
00003a  f8840050          STRB     r0,[r4,#0x50]
;;;4935   
;;;4936   			switch( eAction )
00003e  2e05              CMP      r6,#5
000040  d217              BCS      |L37.114|
000042  e8dff006          TBB      [pc,r6]
000046  1503              DCB      0x15,0x03
000048  070b0d00          DCB      0x07,0x0b,0x0d,0x00
;;;4937   			{
;;;4938   				case eSetBits	:
;;;4939   					pxTCB->ulNotifiedValue |= ulValue;
00004c  6ce0              LDR      r0,[r4,#0x4c]
00004e  4328              ORRS     r0,r0,r5
000050  64e0              STR      r0,[r4,#0x4c]
;;;4940   					break;
000052  e00f              B        |L37.116|
;;;4941   
;;;4942   				case eIncrement	:
;;;4943   					( pxTCB->ulNotifiedValue )++;
000054  6ce0              LDR      r0,[r4,#0x4c]
000056  1c40              ADDS     r0,r0,#1
000058  64e0              STR      r0,[r4,#0x4c]
;;;4944   					break;
00005a  e00b              B        |L37.116|
;;;4945   
;;;4946   				case eSetValueWithOverwrite	:
;;;4947   					pxTCB->ulNotifiedValue = ulValue;
00005c  64e5              STR      r5,[r4,#0x4c]
;;;4948   					break;
00005e  e009              B        |L37.116|
;;;4949   
;;;4950   				case eSetValueWithoutOverwrite :
;;;4951   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000060  f1b80f02          CMP      r8,#2
000064  d001              BEQ      |L37.106|
;;;4952   					{
;;;4953   						pxTCB->ulNotifiedValue = ulValue;
000066  64e5              STR      r5,[r4,#0x4c]
000068  e001              B        |L37.110|
                  |L37.106|
;;;4954   					}
;;;4955   					else
;;;4956   					{
;;;4957   						/* The value could not be written to the task. */
;;;4958   						xReturn = pdFAIL;
00006a  2000              MOVS     r0,#0
00006c  9000              STR      r0,[sp,#0]
                  |L37.110|
;;;4959   					}
;;;4960   					break;
00006e  e001              B        |L37.116|
;;;4961   
;;;4962   				case eNoAction :
;;;4963   					/* The task is being notified without its notify value being
;;;4964   					updated. */
;;;4965   					break;
000070  e000              B        |L37.116|
                  |L37.114|
;;;4966   
;;;4967   				default:
;;;4968   					/* Should not get here if all enums are handled.
;;;4969   					Artificially force an assert by testing a value the
;;;4970   					compiler can't assume is const. */
;;;4971   					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
;;;4972   					break;
000072  bf00              NOP      
                  |L37.116|
000074  bf00              NOP                            ;4940
;;;4973   			}
;;;4974   
;;;4975   			traceTASK_NOTIFY_FROM_ISR();
;;;4976   
;;;4977   			/* If the task is in the blocked state specifically to wait for a
;;;4978   			notification then unblock it now. */
;;;4979   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000076  f1b80f01          CMP      r8,#1
00007a  d12c              BNE      |L37.214|
;;;4980   			{
;;;4981   				/* The task should not have been on an event list. */
;;;4982   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4983   
;;;4984   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00007c  4819              LDR      r0,|L37.228|
00007e  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000080  b9a8              CBNZ     r0,|L37.174|
;;;4985   				{
;;;4986   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000082  1d20              ADDS     r0,r4,#4
000084  f7fffffe          BL       uxListRemove
;;;4987   					prvAddTaskToReadyList( pxTCB );
000088  f894102c          LDRB     r1,[r4,#0x2c]
00008c  2001              MOVS     r0,#1
00008e  4088              LSLS     r0,r0,r1
000090  4915              LDR      r1,|L37.232|
000092  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000094  4308              ORRS     r0,r0,r1
000096  4914              LDR      r1,|L37.232|
000098  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00009a  6ae1              LDR      r1,[r4,#0x2c]
00009c  eb010181          ADD      r1,r1,r1,LSL #2
0000a0  4a12              LDR      r2,|L37.236|
0000a2  eb020081          ADD      r0,r2,r1,LSL #2
0000a6  1d21              ADDS     r1,r4,#4
0000a8  f7fffffe          BL       vListInsertEnd
0000ac  e004              B        |L37.184|
                  |L37.174|
;;;4988   				}
;;;4989   				else
;;;4990   				{
;;;4991   					/* The delayed and ready lists cannot be accessed, so hold
;;;4992   					this task pending until the scheduler is resumed. */
;;;4993   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
0000ae  f1040118          ADD      r1,r4,#0x18
0000b2  480f              LDR      r0,|L37.240|
0000b4  f7fffffe          BL       vListInsertEnd
                  |L37.184|
;;;4994   				}
;;;4995   
;;;4996   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000b8  490e              LDR      r1,|L37.244|
0000ba  6ae0              LDR      r0,[r4,#0x2c]
0000bc  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000be  6ac9              LDR      r1,[r1,#0x2c]
0000c0  4288              CMP      r0,r1
0000c2  d908              BLS      |L37.214|
;;;4997   				{
;;;4998   					/* The notified task has a priority above the currently
;;;4999   					executing task so a yield is required. */
;;;5000   					if( pxHigherPriorityTaskWoken != NULL )
0000c4  f1bb0f00          CMP      r11,#0
0000c8  d002              BEQ      |L37.208|
;;;5001   					{
;;;5002   						*pxHigherPriorityTaskWoken = pdTRUE;
0000ca  2001              MOVS     r0,#1
0000cc  f8cb0000          STR      r0,[r11,#0]
                  |L37.208|
;;;5003   					}
;;;5004   
;;;5005   					/* Mark that a yield is pending in case the user is not
;;;5006   					using the "xHigherPriorityTaskWoken" parameter to an ISR
;;;5007   					safe FreeRTOS function. */
;;;5008   					xYieldPending = pdTRUE;
0000d0  2001              MOVS     r0,#1
0000d2  4909              LDR      r1,|L37.248|
0000d4  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L37.214|
;;;5009   				}
;;;5010   				else
;;;5011   				{
;;;5012   					mtCOVERAGE_TEST_MARKER();
;;;5013   				}
;;;5014   			}
;;;5015   		}
;;;5016   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000d6  bf00              NOP      
0000d8  f3898811          MSR      BASEPRI,r9
0000dc  bf00              NOP      
;;;5017   
;;;5018   		return xReturn;
0000de  9800              LDR      r0,[sp,#0]
;;;5019   	}
0000e0  e8bd8ff8          POP      {r3-r11,pc}
;;;5020   
                          ENDP

                  |L37.228|
                          DCD      uxSchedulerSuspended
                  |L37.232|
                          DCD      uxTopReadyPriority
                  |L37.236|
                          DCD      pxReadyTasksLists
                  |L37.240|
                          DCD      xPendingReadyList
                  |L37.244|
                          DCD      pxCurrentTCB
                  |L37.248|
                          DCD      xYieldPending

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3968   
;;;3969   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4901              LDR      r1,|L38.8|
;;;3970   	{
;;;3971   	TaskHandle_t xReturn;
;;;3972   
;;;3973   		/* A critical section is not required as this is not called from
;;;3974   		an interrupt and the current TCB will always be the same for any
;;;3975   		individual execution thread. */
;;;3976   		xReturn = pxCurrentTCB;
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3977   
;;;3978   		return xReturn;
;;;3979   	}
000004  4770              BX       lr
;;;3980   
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;2303   
;;;2304   TickType_t xTaskGetTickCount( void )
000000  4901              LDR      r1,|L39.8|
;;;2305   {
;;;2306   TickType_t xTicks;
;;;2307   
;;;2308   	/* Critical section required if running on a 16 bit processor. */
;;;2309   	portTICK_TYPE_ENTER_CRITICAL();
;;;2310   	{
;;;2311   		xTicks = xTickCount;
000002  6808              LDR      r0,[r1,#0]  ; xTickCount
;;;2312   	}
;;;2313   	portTICK_TYPE_EXIT_CRITICAL();
;;;2314   
;;;2315   	return xTicks;
;;;2316   }
000004  4770              BX       lr
;;;2317   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L39.8|
                          DCD      xTickCount

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;2318   
;;;2319   TickType_t xTaskGetTickCountFromISR( void )
000000  2100              MOVS     r1,#0
;;;2320   {
;;;2321   TickType_t xReturn;
;;;2322   UBaseType_t uxSavedInterruptStatus;
;;;2323   
;;;2324   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;2325   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;2326   	above the maximum system call priority are kept permanently enabled, even
;;;2327   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;2328   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;2329   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;2330   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;2331   	assigned a priority above the configured maximum system call priority.
;;;2332   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;2333   	that have been assigned a priority at or (logically) below the maximum
;;;2334   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;2335   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;2336   	More information (albeit Cortex-M specific) is provided on the following
;;;2337   	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;2338   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;2339   
;;;2340   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;2341   	{
;;;2342   		xReturn = xTickCount;
000002  4a01              LDR      r2,|L40.8|
000004  6810              LDR      r0,[r2,#0]  ; xTickCount
;;;2343   	}
;;;2344   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;2345   
;;;2346   	return xReturn;
;;;2347   }
000006  4770              BX       lr
;;;2348   /*-----------------------------------------------------------*/
                          ENDP

                  |L40.8|
                          DCD      xTickCount

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;2706   
;;;2707   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2708   {
;;;2709   TCB_t * pxTCB;
;;;2710   TickType_t xItemValue;
;;;2711   BaseType_t xSwitchRequired = pdFALSE;
000004  2700              MOVS     r7,#0
;;;2712   
;;;2713   	/* Called by the portable layer each time a tick interrupt occurs.
;;;2714   	Increments the tick then checks to see if the new tick value will cause any
;;;2715   	tasks to be unblocked. */
;;;2716   	traceTASK_INCREMENT_TICK( xTickCount );
;;;2717   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000006  483a              LDR      r0,|L41.240|
000008  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000a  2800              CMP      r0,#0
00000c  d167              BNE      |L41.222|
;;;2718   	{
;;;2719   		/* Minor optimisation.  The tick count cannot change in this
;;;2720   		block. */
;;;2721   		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
00000e  4839              LDR      r0,|L41.244|
000010  6800              LDR      r0,[r0,#0]  ; xTickCount
000012  1c45              ADDS     r5,r0,#1
;;;2722   
;;;2723   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;2724   		delayed lists if it wraps to 0. */
;;;2725   		xTickCount = xConstTickCount;
000014  4837              LDR      r0,|L41.244|
000016  6005              STR      r5,[r0,#0]  ; xTickCount
;;;2726   
;;;2727   		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
000018  b98d              CBNZ     r5,|L41.62|
;;;2728   		{
;;;2729   			taskSWITCH_DELAYED_LISTS();
00001a  4837              LDR      r0,|L41.248|
00001c  f8d08000          LDR      r8,[r0,#0]  ; pxDelayedTaskList
000020  4836              LDR      r0,|L41.252|
000022  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
000024  4934              LDR      r1,|L41.248|
000026  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
000028  4834              LDR      r0,|L41.252|
00002a  f8c08000          STR      r8,[r0,#0]  ; pxOverflowDelayedTaskList
00002e  4834              LDR      r0,|L41.256|
000030  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000032  1c40              ADDS     r0,r0,#1
000034  4932              LDR      r1,|L41.256|
000036  6008              STR      r0,[r1,#0]  ; xNumOfOverflows
000038  f7fffffe          BL       prvResetNextTaskUnblockTime
00003c  bf00              NOP      
                  |L41.62|
;;;2730   		}
;;;2731   		else
;;;2732   		{
;;;2733   			mtCOVERAGE_TEST_MARKER();
;;;2734   		}
;;;2735   
;;;2736   		/* See if this tick has made a timeout expire.  Tasks are stored in
;;;2737   		the	queue in the order of their wake time - meaning once one task
;;;2738   		has been found whose block time has not expired there is no need to
;;;2739   		look any further down the list. */
;;;2740   		if( xConstTickCount >= xNextTaskUnblockTime )
00003e  4831              LDR      r0,|L41.260|
000040  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000042  4285              CMP      r5,r0
000044  d33b              BCC      |L41.190|
;;;2741   		{
;;;2742   			for( ;; )
000046  bf00              NOP      
                  |L41.72|
;;;2743   			{
;;;2744   				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000048  482b              LDR      r0,|L41.248|
00004a  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
00004c  6800              LDR      r0,[r0,#0]
00004e  b908              CBNZ     r0,|L41.84|
000050  2001              MOVS     r0,#1
000052  e000              B        |L41.86|
                  |L41.84|
000054  2000              MOVS     r0,#0
                  |L41.86|
000056  b120              CBZ      r0,|L41.98|
;;;2745   				{
;;;2746   					/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;2747   					to the maximum possible value so it is extremely
;;;2748   					unlikely that the
;;;2749   					if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;2750   					next time through. */
;;;2751   					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000058  f04f30ff          MOV      r0,#0xffffffff
00005c  4929              LDR      r1,|L41.260|
00005e  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;2752   					break;
000060  e02c              B        |L41.188|
                  |L41.98|
;;;2753   				}
;;;2754   				else
;;;2755   				{
;;;2756   					/* The delayed list is not empty, get the value of the
;;;2757   					item at the head of the delayed list.  This is the time
;;;2758   					at which the task at the head of the delayed list must
;;;2759   					be removed from the Blocked state. */
;;;2760   					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000062  4825              LDR      r0,|L41.248|
000064  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000066  68c0              LDR      r0,[r0,#0xc]
000068  68c4              LDR      r4,[r0,#0xc]
;;;2761   					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
00006a  6866              LDR      r6,[r4,#4]
;;;2762   
;;;2763   					if( xConstTickCount < xItemValue )
00006c  42b5              CMP      r5,r6
00006e  d202              BCS      |L41.118|
;;;2764   					{
;;;2765   						/* It is not time to unblock this item yet, but the
;;;2766   						item value is the time at which the task at the head
;;;2767   						of the blocked list must be removed from the Blocked
;;;2768   						state -	so record the item value in
;;;2769   						xNextTaskUnblockTime. */
;;;2770   						xNextTaskUnblockTime = xItemValue;
000070  4824              LDR      r0,|L41.260|
000072  6006              STR      r6,[r0,#0]  ; xNextTaskUnblockTime
;;;2771   						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
000074  e022              B        |L41.188|
                  |L41.118|
;;;2772   					}
;;;2773   					else
;;;2774   					{
;;;2775   						mtCOVERAGE_TEST_MARKER();
;;;2776   					}
;;;2777   
;;;2778   					/* It is time to remove the item from the Blocked state. */
;;;2779   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000076  1d20              ADDS     r0,r4,#4
000078  f7fffffe          BL       uxListRemove
;;;2780   
;;;2781   					/* Is the task waiting on an event also?  If so remove
;;;2782   					it from the event list. */
;;;2783   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00007c  6aa0              LDR      r0,[r4,#0x28]
00007e  b118              CBZ      r0,|L41.136|
;;;2784   					{
;;;2785   						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000080  f1040018          ADD      r0,r4,#0x18
000084  f7fffffe          BL       uxListRemove
                  |L41.136|
;;;2786   					}
;;;2787   					else
;;;2788   					{
;;;2789   						mtCOVERAGE_TEST_MARKER();
;;;2790   					}
;;;2791   
;;;2792   					/* Place the unblocked task into the appropriate ready
;;;2793   					list. */
;;;2794   					prvAddTaskToReadyList( pxTCB );
000088  f894102c          LDRB     r1,[r4,#0x2c]
00008c  2001              MOVS     r0,#1
00008e  4088              LSLS     r0,r0,r1
000090  491d              LDR      r1,|L41.264|
000092  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000094  4308              ORRS     r0,r0,r1
000096  491c              LDR      r1,|L41.264|
000098  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00009a  6ae1              LDR      r1,[r4,#0x2c]
00009c  eb010181          ADD      r1,r1,r1,LSL #2
0000a0  4a1a              LDR      r2,|L41.268|
0000a2  eb020081          ADD      r0,r2,r1,LSL #2
0000a6  1d21              ADDS     r1,r4,#4
0000a8  f7fffffe          BL       vListInsertEnd
;;;2795   
;;;2796   					/* A task being unblocked cannot cause an immediate
;;;2797   					context switch if preemption is turned off. */
;;;2798   					#if (  configUSE_PREEMPTION == 1 )
;;;2799   					{
;;;2800   						/* Preemption is on, but a context switch should
;;;2801   						only be performed if the unblocked task has a
;;;2802   						priority that is equal to or higher than the
;;;2803   						currently executing task. */
;;;2804   						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0000ac  4918              LDR      r1,|L41.272|
0000ae  6ae0              LDR      r0,[r4,#0x2c]
0000b0  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000b2  6ac9              LDR      r1,[r1,#0x2c]
0000b4  4288              CMP      r0,r1
0000b6  d3c7              BCC      |L41.72|
;;;2805   						{
;;;2806   							xSwitchRequired = pdTRUE;
0000b8  2701              MOVS     r7,#1
0000ba  e7c5              B        |L41.72|
                  |L41.188|
0000bc  bf00              NOP                            ;2752
                  |L41.190|
;;;2807   						}
;;;2808   						else
;;;2809   						{
;;;2810   							mtCOVERAGE_TEST_MARKER();
;;;2811   						}
;;;2812   					}
;;;2813   					#endif /* configUSE_PREEMPTION */
;;;2814   				}
;;;2815   			}
;;;2816   		}
;;;2817   
;;;2818   		/* Tasks of equal priority to the currently running task will share
;;;2819   		processing time (time slice) if preemption is on, and the application
;;;2820   		writer has not explicitly turned time slicing off. */
;;;2821   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2822   		{
;;;2823   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
0000be  4814              LDR      r0,|L41.272|
0000c0  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000c2  6ac0              LDR      r0,[r0,#0x2c]
0000c4  eb000080          ADD      r0,r0,r0,LSL #2
0000c8  4910              LDR      r1,|L41.268|
0000ca  f8510020          LDR      r0,[r1,r0,LSL #2]
0000ce  2801              CMP      r0,#1
0000d0  d900              BLS      |L41.212|
;;;2824   			{
;;;2825   				xSwitchRequired = pdTRUE;
0000d2  2701              MOVS     r7,#1
                  |L41.212|
;;;2826   			}
;;;2827   			else
;;;2828   			{
;;;2829   				mtCOVERAGE_TEST_MARKER();
;;;2830   			}
;;;2831   		}
;;;2832   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2833   
;;;2834   		#if ( configUSE_TICK_HOOK == 1 )
;;;2835   		{
;;;2836   			/* Guard against the tick hook being called when the pended tick
;;;2837   			count is being unwound (when the scheduler is being unlocked). */
;;;2838   			if( xPendedTicks == ( TickType_t ) 0 )
;;;2839   			{
;;;2840   				vApplicationTickHook();
;;;2841   			}
;;;2842   			else
;;;2843   			{
;;;2844   				mtCOVERAGE_TEST_MARKER();
;;;2845   			}
;;;2846   		}
;;;2847   		#endif /* configUSE_TICK_HOOK */
;;;2848   
;;;2849   		#if ( configUSE_PREEMPTION == 1 )
;;;2850   		{
;;;2851   			if( xYieldPending != pdFALSE )
0000d4  480f              LDR      r0,|L41.276|
0000d6  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000d8  b100              CBZ      r0,|L41.220|
;;;2852   			{
;;;2853   				xSwitchRequired = pdTRUE;
0000da  2701              MOVS     r7,#1
                  |L41.220|
;;;2854   			}
;;;2855   			else
;;;2856   			{
;;;2857   				mtCOVERAGE_TEST_MARKER();
;;;2858   			}
;;;2859   		}
;;;2860   		#endif /* configUSE_PREEMPTION */
;;;2861   	}
0000dc  e004              B        |L41.232|
                  |L41.222|
;;;2862   	else
;;;2863   	{
;;;2864   		++xPendedTicks;
0000de  480e              LDR      r0,|L41.280|
0000e0  6800              LDR      r0,[r0,#0]  ; xPendedTicks
0000e2  1c40              ADDS     r0,r0,#1
0000e4  490c              LDR      r1,|L41.280|
0000e6  6008              STR      r0,[r1,#0]  ; xPendedTicks
                  |L41.232|
;;;2865   
;;;2866   		/* The tick hook gets called at regular intervals, even if the
;;;2867   		scheduler is locked. */
;;;2868   		#if ( configUSE_TICK_HOOK == 1 )
;;;2869   		{
;;;2870   			vApplicationTickHook();
;;;2871   		}
;;;2872   		#endif
;;;2873   	}
;;;2874   
;;;2875   	return xSwitchRequired;
0000e8  4638              MOV      r0,r7
;;;2876   }
0000ea  e8bd81f0          POP      {r4-r8,pc}
;;;2877   /*-----------------------------------------------------------*/
                          ENDP

0000ee  0000              DCW      0x0000
                  |L41.240|
                          DCD      uxSchedulerSuspended
                  |L41.244|
                          DCD      xTickCount
                  |L41.248|
                          DCD      pxDelayedTaskList
                  |L41.252|
                          DCD      pxOverflowDelayedTaskList
                  |L41.256|
                          DCD      xNumOfOverflows
                  |L41.260|
                          DCD      xNextTaskUnblockTime
                  |L41.264|
                          DCD      uxTopReadyPriority
                  |L41.268|
                          DCD      pxReadyTasksLists
                  |L41.272|
                          DCD      pxCurrentTCB
                  |L41.276|
                          DCD      xYieldPending
                  |L41.280|
                          DCD      xPendedTicks

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;5111   
;;;5112   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;5113   	{
000002  4605              MOV      r5,r0
;;;5114   	TCB_t *pxTCB;
;;;5115   	BaseType_t xReturn;
;;;5116   
;;;5117   		/* If null is passed in here then it is the calling task that is having
;;;5118   		its notification state cleared. */
;;;5119   		pxTCB = prvGetTCBFromHandle( xTask );
000004  b915              CBNZ     r5,|L42.12|
000006  480a              LDR      r0,|L42.48|
000008  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000a  e000              B        |L42.14|
                  |L42.12|
00000c  4628              MOV      r0,r5
                  |L42.14|
00000e  4606              MOV      r6,r0
;;;5120   
;;;5121   		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;5122   		{
;;;5123   			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
000014  f8960050          LDRB     r0,[r6,#0x50]
000018  2802              CMP      r0,#2
00001a  d104              BNE      |L42.38|
;;;5124   			{
;;;5125   				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00001c  2000              MOVS     r0,#0
00001e  f8860050          STRB     r0,[r6,#0x50]
;;;5126   				xReturn = pdPASS;
000022  2401              MOVS     r4,#1
000024  e000              B        |L42.40|
                  |L42.38|
;;;5127   			}
;;;5128   			else
;;;5129   			{
;;;5130   				xReturn = pdFAIL;
000026  2400              MOVS     r4,#0
                  |L42.40|
;;;5131   			}
;;;5132   		}
;;;5133   		taskEXIT_CRITICAL();
000028  f7fffffe          BL       vPortExitCritical
;;;5134   
;;;5135   		return xReturn;
00002c  4620              MOV      r0,r4
;;;5136   	}
00002e  bd70              POP      {r4-r6,pc}
;;;5137   
                          ENDP

                  |L42.48|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4702   
;;;4703   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4704   	{
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;4705   	BaseType_t xReturn;
;;;4706   
;;;4707   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4708   		{
;;;4709   			/* Only block if a notification is not already pending. */
;;;4710   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000010  4821              LDR      r0,|L43.152|
000012  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000014  f8900050          LDRB     r0,[r0,#0x50]
000018  2802              CMP      r0,#2
00001a  d018              BEQ      |L43.78|
;;;4711   			{
;;;4712   				/* Clear bits in the task's notification value as bits may get
;;;4713   				set	by the notifying task or interrupt.  This can be used to
;;;4714   				clear the value to zero. */
;;;4715   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  491e              LDR      r1,|L43.152|
00001e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000020  f101004c          ADD      r0,r1,#0x4c
000024  6cc9              LDR      r1,[r1,#0x4c]
000026  43b9              BICS     r1,r1,r7
000028  6001              STR      r1,[r0,#0]
;;;4716   
;;;4717   				/* Mark this task as waiting for a notification. */
;;;4718   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
00002a  2001              MOVS     r0,#1
00002c  491a              LDR      r1,|L43.152|
00002e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000030  f8810050          STRB     r0,[r1,#0x50]
;;;4719   
;;;4720   				if( xTicksToWait > ( TickType_t ) 0 )
000034  b15d              CBZ      r5,|L43.78|
;;;4721   				{
;;;4722   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000036  2101              MOVS     r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4723   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4724   
;;;4725   					/* All ports are written to allow a yield in a critical
;;;4726   					section (some will yield immediately, others wait until the
;;;4727   					critical section exits) - but it is not something that
;;;4728   					application code should ever do. */
;;;4729   					portYIELD_WITHIN_API();
00003e  f04f5080          MOV      r0,#0x10000000
000042  4916              LDR      r1,|L43.156|
000044  6008              STR      r0,[r1,#0]
000046  f3bf8f4f          DSB      
00004a  f3bf8f6f          ISB      
                  |L43.78|
;;;4730   				}
;;;4731   				else
;;;4732   				{
;;;4733   					mtCOVERAGE_TEST_MARKER();
;;;4734   				}
;;;4735   			}
;;;4736   			else
;;;4737   			{
;;;4738   				mtCOVERAGE_TEST_MARKER();
;;;4739   			}
;;;4740   		}
;;;4741   		taskEXIT_CRITICAL();
00004e  f7fffffe          BL       vPortExitCritical
;;;4742   
;;;4743   		taskENTER_CRITICAL();
000052  f7fffffe          BL       vPortEnterCritical
;;;4744   		{
;;;4745   			traceTASK_NOTIFY_WAIT();
;;;4746   
;;;4747   			if( pulNotificationValue != NULL )
000056  b11c              CBZ      r4,|L43.96|
;;;4748   			{
;;;4749   				/* Output the current notification value, which may or may not
;;;4750   				have changed. */
;;;4751   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000058  480f              LDR      r0,|L43.152|
00005a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00005c  6cc0              LDR      r0,[r0,#0x4c]
00005e  6020              STR      r0,[r4,#0]
                  |L43.96|
;;;4752   			}
;;;4753   
;;;4754   			/* If ucNotifyValue is set then either the task never entered the
;;;4755   			blocked state (because a notification was already pending) or the
;;;4756   			task unblocked because of a notification.  Otherwise the task
;;;4757   			unblocked because of a timeout. */
;;;4758   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000060  480d              LDR      r0,|L43.152|
000062  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000064  f8900050          LDRB     r0,[r0,#0x50]
000068  2802              CMP      r0,#2
00006a  d001              BEQ      |L43.112|
;;;4759   			{
;;;4760   				/* A notification was not received. */
;;;4761   				xReturn = pdFALSE;
00006c  2600              MOVS     r6,#0
00006e  e008              B        |L43.130|
                  |L43.112|
;;;4762   			}
;;;4763   			else
;;;4764   			{
;;;4765   				/* A notification was already pending or a notification was
;;;4766   				received while the task was waiting. */
;;;4767   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
000070  4909              LDR      r1,|L43.152|
000072  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000074  f101004c          ADD      r0,r1,#0x4c
000078  6cc9              LDR      r1,[r1,#0x4c]
00007a  ea210108          BIC      r1,r1,r8
00007e  6001              STR      r1,[r0,#0]
;;;4768   				xReturn = pdTRUE;
000080  2601              MOVS     r6,#1
                  |L43.130|
;;;4769   			}
;;;4770   
;;;4771   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000082  2000              MOVS     r0,#0
000084  4904              LDR      r1,|L43.152|
000086  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000088  f8810050          STRB     r0,[r1,#0x50]
;;;4772   		}
;;;4773   		taskEXIT_CRITICAL();
00008c  f7fffffe          BL       vPortExitCritical
;;;4774   
;;;4775   		return xReturn;
000090  4630              MOV      r0,r6
;;;4776   	}
000092  e8bd81f0          POP      {r4-r8,pc}
;;;4777   
                          ENDP

000096  0000              DCW      0x0000
                  |L43.152|
                          DCD      pxCurrentTCB
                  |L43.156|
                          DCD      0xe000ed04

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;4103   
;;;4104   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;4105   	{
000002  4605              MOV      r5,r0
;;;4106   	TCB_t * const pxTCB = pxMutexHolder;
000004  462c              MOV      r4,r5
;;;4107   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;4108   
;;;4109   		if( pxMutexHolder != NULL )
000008  b3ad              CBZ      r5,|L44.118|
;;;4110   		{
;;;4111   			/* A task can only have an inherited priority if it holds the mutex.
;;;4112   			If the mutex is held by a task then it cannot be given from an
;;;4113   			interrupt, and if a mutex is given by the holding task then it must
;;;4114   			be the running state task. */
;;;4115   			configASSERT( pxTCB == pxCurrentTCB );
;;;4116   			configASSERT( pxTCB->uxMutexesHeld );
;;;4117   			( pxTCB->uxMutexesHeld )--;
00000a  6ca0              LDR      r0,[r4,#0x48]
00000c  1e40              SUBS     r0,r0,#1
00000e  64a0              STR      r0,[r4,#0x48]
;;;4118   
;;;4119   			/* Has the holder of the mutex inherited the priority of another
;;;4120   			task? */
;;;4121   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
000010  6c61              LDR      r1,[r4,#0x44]
000012  6ae0              LDR      r0,[r4,#0x2c]
000014  4288              CMP      r0,r1
000016  d02e              BEQ      |L44.118|
;;;4122   			{
;;;4123   				/* Only disinherit if no other mutexes are held. */
;;;4124   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  bb60              CBNZ     r0,|L44.118|
;;;4125   				{
;;;4126   					/* A task can only have an inherited priority if it holds
;;;4127   					the mutex.  If the mutex is held by a task then it cannot be
;;;4128   					given from an interrupt, and if a mutex is given by the
;;;4129   					holding task then it must be the running state task.  Remove
;;;4130   					the holding task from the ready/delayed list. */
;;;4131   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00001c  1d20              ADDS     r0,r4,#4
00001e  f7fffffe          BL       uxListRemove
000022  b978              CBNZ     r0,|L44.68|
;;;4132   					{
;;;4133   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000024  6ae0              LDR      r0,[r4,#0x2c]
000026  eb000080          ADD      r0,r0,r0,LSL #2
00002a  4914              LDR      r1,|L44.124|
00002c  f8510020          LDR      r0,[r1,r0,LSL #2]
000030  b940              CBNZ     r0,|L44.68|
000032  f894102c          LDRB     r1,[r4,#0x2c]
000036  2001              MOVS     r0,#1
000038  4088              LSLS     r0,r0,r1
00003a  4911              LDR      r1,|L44.128|
00003c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003e  4381              BICS     r1,r1,r0
000040  480f              LDR      r0,|L44.128|
000042  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L44.68|
;;;4134   					}
;;;4135   					else
;;;4136   					{
;;;4137   						mtCOVERAGE_TEST_MARKER();
;;;4138   					}
;;;4139   
;;;4140   					/* Disinherit the priority before adding the task into the
;;;4141   					new	ready list. */
;;;4142   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;4143   					pxTCB->uxPriority = pxTCB->uxBasePriority;
000044  6c60              LDR      r0,[r4,#0x44]
000046  62e0              STR      r0,[r4,#0x2c]
;;;4144   
;;;4145   					/* Reset the event list item value.  It cannot be in use for
;;;4146   					any other purpose if this task is running, and it must be
;;;4147   					running to give back the mutex. */
;;;4148   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000048  6ae0              LDR      r0,[r4,#0x2c]
00004a  f1c00003          RSB      r0,r0,#3
00004e  61a0              STR      r0,[r4,#0x18]
;;;4149   					prvAddTaskToReadyList( pxTCB );
000050  f894102c          LDRB     r1,[r4,#0x2c]
000054  2001              MOVS     r0,#1
000056  4088              LSLS     r0,r0,r1
000058  4909              LDR      r1,|L44.128|
00005a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00005c  4308              ORRS     r0,r0,r1
00005e  4908              LDR      r1,|L44.128|
000060  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000062  6ae1              LDR      r1,[r4,#0x2c]
000064  eb010181          ADD      r1,r1,r1,LSL #2
000068  4a04              LDR      r2,|L44.124|
00006a  eb020081          ADD      r0,r2,r1,LSL #2
00006e  1d21              ADDS     r1,r4,#4
000070  f7fffffe          BL       vListInsertEnd
;;;4150   
;;;4151   					/* Return true to indicate that a context switch is required.
;;;4152   					This is only actually required in the corner case whereby
;;;4153   					multiple mutexes were held and the mutexes were given back
;;;4154   					in an order different to that in which they were taken.
;;;4155   					If a context switch did not occur when the first mutex was
;;;4156   					returned, even if a task was waiting on it, then a context
;;;4157   					switch should occur when the last mutex is returned whether
;;;4158   					a task is waiting on it or not. */
;;;4159   					xReturn = pdTRUE;
000074  2601              MOVS     r6,#1
                  |L44.118|
;;;4160   				}
;;;4161   				else
;;;4162   				{
;;;4163   					mtCOVERAGE_TEST_MARKER();
;;;4164   				}
;;;4165   			}
;;;4166   			else
;;;4167   			{
;;;4168   				mtCOVERAGE_TEST_MARKER();
;;;4169   			}
;;;4170   		}
;;;4171   		else
;;;4172   		{
;;;4173   			mtCOVERAGE_TEST_MARKER();
;;;4174   		}
;;;4175   
;;;4176   		return xReturn;
000076  4630              MOV      r0,r6
;;;4177   	}
000078  bd70              POP      {r4-r6,pc}
;;;4178   
                          ENDP

00007a  0000              DCW      0x0000
                  |L44.124|
                          DCD      pxReadyTasksLists
                  |L44.128|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityInherit PROC
;;;4013   
;;;4014   	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;4015   	{
000002  4605              MOV      r5,r0
;;;4016   	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
000004  462c              MOV      r4,r5
;;;4017   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;4018   
;;;4019   		/* If the mutex was given back by an interrupt while the queue was
;;;4020   		locked then the mutex holder might now be NULL.  _RB_ Is this still
;;;4021   		needed as interrupts can no longer use mutexes? */
;;;4022   		if( pxMutexHolder != NULL )
000008  2d00              CMP      r5,#0
00000a  d04d              BEQ      |L45.168|
;;;4023   		{
;;;4024   			/* If the holder of the mutex has a priority below the priority of
;;;4025   			the task attempting to obtain the mutex then it will temporarily
;;;4026   			inherit the priority of the task attempting to obtain the mutex. */
;;;4027   			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
00000c  4927              LDR      r1,|L45.172|
00000e  6ae0              LDR      r0,[r4,#0x2c]
000010  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000012  6ac9              LDR      r1,[r1,#0x2c]
000014  4288              CMP      r0,r1
000016  d240              BCS      |L45.154|
;;;4028   			{
;;;4029   				/* Adjust the mutex holder state to account for its new
;;;4030   				priority.  Only reset the event list item value if the value is
;;;4031   				not being used for anything else. */
;;;4032   				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000018  69a0              LDR      r0,[r4,#0x18]
00001a  f0004000          AND      r0,r0,#0x80000000
00001e  b928              CBNZ     r0,|L45.44|
;;;4033   				{
;;;4034   					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000020  4822              LDR      r0,|L45.172|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  6ac0              LDR      r0,[r0,#0x2c]
000026  f1c00003          RSB      r0,r0,#3
00002a  61a0              STR      r0,[r4,#0x18]
                  |L45.44|
;;;4035   				}
;;;4036   				else
;;;4037   				{
;;;4038   					mtCOVERAGE_TEST_MARKER();
;;;4039   				}
;;;4040   
;;;4041   				/* If the task being modified is in the ready state it will need
;;;4042   				to be moved into a new list. */
;;;4043   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  eb010181          ADD      r1,r1,r1,LSL #2
000032  4a1f              LDR      r2,|L45.176|
000034  eb020181          ADD      r1,r2,r1,LSL #2
000038  6960              LDR      r0,[r4,#0x14]
00003a  4288              CMP      r0,r1
00003c  d101              BNE      |L45.66|
00003e  2001              MOVS     r0,#1
000040  e000              B        |L45.68|
                  |L45.66|
000042  2000              MOVS     r0,#0
                  |L45.68|
000044  b318              CBZ      r0,|L45.142|
;;;4044   				{
;;;4045   					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000046  1d20              ADDS     r0,r4,#4
000048  f7fffffe          BL       uxListRemove
00004c  b940              CBNZ     r0,|L45.96|
;;;4046   					{
;;;4047   						/* It is known that the task is in its ready list so
;;;4048   						there is no need to check again and the port level
;;;4049   						reset macro can be called directly. */
;;;4050   						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
00004e  f894102c          LDRB     r1,[r4,#0x2c]
000052  2001              MOVS     r0,#1
000054  4088              LSLS     r0,r0,r1
000056  4917              LDR      r1,|L45.180|
000058  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00005a  4381              BICS     r1,r1,r0
00005c  4815              LDR      r0,|L45.180|
00005e  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L45.96|
;;;4051   					}
;;;4052   					else
;;;4053   					{
;;;4054   						mtCOVERAGE_TEST_MARKER();
;;;4055   					}
;;;4056   
;;;4057   					/* Inherit the priority before being moved into the new list. */
;;;4058   					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
000060  4812              LDR      r0,|L45.172|
000062  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000064  6ac0              LDR      r0,[r0,#0x2c]
000066  62e0              STR      r0,[r4,#0x2c]
;;;4059   					prvAddTaskToReadyList( pxMutexHolderTCB );
000068  f894102c          LDRB     r1,[r4,#0x2c]
00006c  2001              MOVS     r0,#1
00006e  4088              LSLS     r0,r0,r1
000070  4910              LDR      r1,|L45.180|
000072  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000074  4308              ORRS     r0,r0,r1
000076  490f              LDR      r1,|L45.180|
000078  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00007a  6ae1              LDR      r1,[r4,#0x2c]
00007c  eb010181          ADD      r1,r1,r1,LSL #2
000080  4a0b              LDR      r2,|L45.176|
000082  eb020081          ADD      r0,r2,r1,LSL #2
000086  1d21              ADDS     r1,r4,#4
000088  f7fffffe          BL       vListInsertEnd
00008c  e003              B        |L45.150|
                  |L45.142|
;;;4060   				}
;;;4061   				else
;;;4062   				{
;;;4063   					/* Just inherit the priority. */
;;;4064   					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
00008e  4807              LDR      r0,|L45.172|
000090  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000092  6ac0              LDR      r0,[r0,#0x2c]
000094  62e0              STR      r0,[r4,#0x2c]
                  |L45.150|
;;;4065   				}
;;;4066   
;;;4067   				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
;;;4068   
;;;4069   				/* Inheritance occurred. */
;;;4070   				xReturn = pdTRUE;
000096  2601              MOVS     r6,#1
000098  e006              B        |L45.168|
                  |L45.154|
;;;4071   			}
;;;4072   			else
;;;4073   			{
;;;4074   				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
00009a  4904              LDR      r1,|L45.172|
00009c  6c60              LDR      r0,[r4,#0x44]
00009e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000a0  6ac9              LDR      r1,[r1,#0x2c]
0000a2  4288              CMP      r0,r1
0000a4  d200              BCS      |L45.168|
;;;4075   				{
;;;4076   					/* The base priority of the mutex holder is lower than the
;;;4077   					priority of the task attempting to take the mutex, but the
;;;4078   					current priority of the mutex holder is not lower than the
;;;4079   					priority of the task attempting to take the mutex.
;;;4080   					Therefore the mutex holder must have already inherited a
;;;4081   					priority, but inheritance would have occurred if that had
;;;4082   					not been the case. */
;;;4083   					xReturn = pdTRUE;
0000a6  2601              MOVS     r6,#1
                  |L45.168|
;;;4084   				}
;;;4085   				else
;;;4086   				{
;;;4087   					mtCOVERAGE_TEST_MARKER();
;;;4088   				}
;;;4089   			}
;;;4090   		}
;;;4091   		else
;;;4092   		{
;;;4093   			mtCOVERAGE_TEST_MARKER();
;;;4094   		}
;;;4095   
;;;4096   		return xReturn;
0000a8  4630              MOV      r0,r6
;;;4097   	}
0000aa  bd70              POP      {r4-r6,pc}
;;;4098   
                          ENDP

                  |L45.172|
                          DCD      pxCurrentTCB
                  |L45.176|
                          DCD      pxReadyTasksLists
                  |L45.180|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;3137   
;;;3138   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;3139   {
000002  4606              MOV      r6,r0
;;;3140   TCB_t *pxUnblockedTCB;
;;;3141   BaseType_t xReturn;
;;;3142   
;;;3143   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;3144   	called from a critical section within an ISR. */
;;;3145   
;;;3146   	/* The event list is sorted in priority order, so the first in the list can
;;;3147   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;3148   	the delayed list, and add it to the ready list.
;;;3149   
;;;3150   	If an event is for a queue that is locked then this function will never
;;;3151   	get called - the lock count on the queue will get modified instead.  This
;;;3152   	means exclusive access to the event list is guaranteed here.
;;;3153   
;;;3154   	This function assumes that a check has already been made to ensure that
;;;3155   	pxEventList is not empty. */
;;;3156   	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000004  68f0              LDR      r0,[r6,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;3157   	configASSERT( pxUnblockedTCB );
;;;3158   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000008  f1040018          ADD      r0,r4,#0x18
00000c  f7fffffe          BL       uxListRemove
;;;3159   
;;;3160   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000010  4815              LDR      r0,|L46.104|
000012  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000014  b9a8              CBNZ     r0,|L46.66|
;;;3161   	{
;;;3162   		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       uxListRemove
;;;3163   		prvAddTaskToReadyList( pxUnblockedTCB );
00001c  f894102c          LDRB     r1,[r4,#0x2c]
000020  2001              MOVS     r0,#1
000022  4088              LSLS     r0,r0,r1
000024  4911              LDR      r1,|L46.108|
000026  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000028  4308              ORRS     r0,r0,r1
00002a  4910              LDR      r1,|L46.108|
00002c  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00002e  6ae1              LDR      r1,[r4,#0x2c]
000030  eb010181          ADD      r1,r1,r1,LSL #2
000034  4a0e              LDR      r2,|L46.112|
000036  eb020081          ADD      r0,r2,r1,LSL #2
00003a  1d21              ADDS     r1,r4,#4
00003c  f7fffffe          BL       vListInsertEnd
000040  e004              B        |L46.76|
                  |L46.66|
;;;3164   
;;;3165   		#if( configUSE_TICKLESS_IDLE != 0 )
;;;3166   		{
;;;3167   			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;3168   			might be set to the blocked task's time out time.  If the task is
;;;3169   			unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;3170   			normally left unchanged, because it is automatically reset to a new
;;;3171   			value when the tick count equals xNextTaskUnblockTime.  However if
;;;3172   			tickless idling is used it might be more important to enter sleep mode
;;;3173   			at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;3174   			ensure it is updated at the earliest possible time. */
;;;3175   			prvResetNextTaskUnblockTime();
;;;3176   		}
;;;3177   		#endif
;;;3178   	}
;;;3179   	else
;;;3180   	{
;;;3181   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;3182   		pending until the scheduler is resumed. */
;;;3183   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
000042  f1040118          ADD      r1,r4,#0x18
000046  480b              LDR      r0,|L46.116|
000048  f7fffffe          BL       vListInsertEnd
                  |L46.76|
;;;3184   	}
;;;3185   
;;;3186   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00004c  490a              LDR      r1,|L46.120|
00004e  6ae0              LDR      r0,[r4,#0x2c]
000050  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000052  6ac9              LDR      r1,[r1,#0x2c]
000054  4288              CMP      r0,r1
000056  d904              BLS      |L46.98|
;;;3187   	{
;;;3188   		/* Return true if the task removed from the event list has a higher
;;;3189   		priority than the calling task.  This allows the calling task to know if
;;;3190   		it should force a context switch now. */
;;;3191   		xReturn = pdTRUE;
000058  2501              MOVS     r5,#1
;;;3192   
;;;3193   		/* Mark that a yield is pending in case the user is not using the
;;;3194   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;3195   		xYieldPending = pdTRUE;
00005a  2001              MOVS     r0,#1
00005c  4907              LDR      r1,|L46.124|
00005e  6008              STR      r0,[r1,#0]  ; xYieldPending
000060  e000              B        |L46.100|
                  |L46.98|
;;;3196   	}
;;;3197   	else
;;;3198   	{
;;;3199   		xReturn = pdFALSE;
000062  2500              MOVS     r5,#0
                  |L46.100|
;;;3200   	}
;;;3201   
;;;3202   	return xReturn;
000064  4628              MOV      r0,r5
;;;3203   }
000066  bd70              POP      {r4-r6,pc}
;;;3204   /*-----------------------------------------------------------*/
                          ENDP

                  |L46.104|
                          DCD      uxSchedulerSuspended
                  |L46.108|
                          DCD      uxTopReadyPriority
                  |L46.112|
                          DCD      pxReadyTasksLists
                  |L46.116|
                          DCD      xPendingReadyList
                  |L46.120|
                          DCD      pxCurrentTCB
                  |L46.124|
                          DCD      xYieldPending

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;2193   
;;;2194   BaseType_t xTaskResumeAll( void )
000000  b570              PUSH     {r4-r6,lr}
;;;2195   {
;;;2196   TCB_t *pxTCB = NULL;
000002  2400              MOVS     r4,#0
;;;2197   BaseType_t xAlreadyYielded = pdFALSE;
000004  2600              MOVS     r6,#0
;;;2198   
;;;2199   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;2200   	previous call to vTaskSuspendAll(). */
;;;2201   	configASSERT( uxSchedulerSuspended );
;;;2202   
;;;2203   	/* It is possible that an ISR caused a task to be removed from an event
;;;2204   	list while the scheduler was suspended.  If this was the case then the
;;;2205   	removed task will have been added to the xPendingReadyList.  Once the
;;;2206   	scheduler has been resumed it is safe to move all the pending ready
;;;2207   	tasks from this list into their appropriate ready list. */
;;;2208   	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;2209   	{
;;;2210   		--uxSchedulerSuspended;
00000a  482e              LDR      r0,|L47.196|
00000c  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000e  1e40              SUBS     r0,r0,#1
000010  492c              LDR      r1,|L47.196|
000012  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;2211   
;;;2212   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000018  2800              CMP      r0,#0
00001a  d14f              BNE      |L47.188|
;;;2213   		{
;;;2214   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
00001c  482a              LDR      r0,|L47.200|
00001e  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000020  2800              CMP      r0,#0
000022  d04b              BEQ      |L47.188|
;;;2215   			{
;;;2216   				/* Move any readied tasks from the pending list into the
;;;2217   				appropriate ready list. */
;;;2218   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
000024  e024              B        |L47.112|
                  |L47.38|
;;;2219   				{
;;;2220   					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000026  4829              LDR      r0,|L47.204|
000028  68c0              LDR      r0,[r0,#0xc]
00002a  68c4              LDR      r4,[r0,#0xc]
;;;2221   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
00002c  f1040018          ADD      r0,r4,#0x18
000030  f7fffffe          BL       uxListRemove
;;;2222   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       uxListRemove
;;;2223   					prvAddTaskToReadyList( pxTCB );
00003a  f894102c          LDRB     r1,[r4,#0x2c]
00003e  2001              MOVS     r0,#1
000040  4088              LSLS     r0,r0,r1
000042  4923              LDR      r1,|L47.208|
000044  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000046  4308              ORRS     r0,r0,r1
000048  4921              LDR      r1,|L47.208|
00004a  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00004c  6ae1              LDR      r1,[r4,#0x2c]
00004e  eb010181          ADD      r1,r1,r1,LSL #2
000052  4a20              LDR      r2,|L47.212|
000054  eb020081          ADD      r0,r2,r1,LSL #2
000058  1d21              ADDS     r1,r4,#4
00005a  f7fffffe          BL       vListInsertEnd
;;;2224   
;;;2225   					/* If the moved task has a priority higher than the current
;;;2226   					task then a yield must be performed. */
;;;2227   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00005e  491e              LDR      r1,|L47.216|
000060  6ae0              LDR      r0,[r4,#0x2c]
000062  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000064  6ac9              LDR      r1,[r1,#0x2c]
000066  4288              CMP      r0,r1
000068  d302              BCC      |L47.112|
;;;2228   					{
;;;2229   						xYieldPending = pdTRUE;
00006a  2001              MOVS     r0,#1
00006c  491b              LDR      r1,|L47.220|
00006e  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L47.112|
000070  4816              LDR      r0,|L47.204|
000072  6800              LDR      r0,[r0,#0]            ;2218  ; xPendingReadyList
000074  b908              CBNZ     r0,|L47.122|
000076  2001              MOVS     r0,#1                 ;2218
000078  e000              B        |L47.124|
                  |L47.122|
00007a  2000              MOVS     r0,#0                 ;2218
                  |L47.124|
00007c  2800              CMP      r0,#0                 ;2218
00007e  d0d2              BEQ      |L47.38|
;;;2230   					}
;;;2231   					else
;;;2232   					{
;;;2233   						mtCOVERAGE_TEST_MARKER();
;;;2234   					}
;;;2235   				}
;;;2236   
;;;2237   				if( pxTCB != NULL )
000080  b10c              CBZ      r4,|L47.134|
;;;2238   				{
;;;2239   					/* A task was unblocked while the scheduler was suspended,
;;;2240   					which may have prevented the next unblock time from being
;;;2241   					re-calculated, in which case re-calculate it now.  Mainly
;;;2242   					important for low power tickless implementations, where
;;;2243   					this can prevent an unnecessary exit from low power
;;;2244   					state. */
;;;2245   					prvResetNextTaskUnblockTime();
000082  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L47.134|
;;;2246   				}
;;;2247   
;;;2248   				/* If any ticks occurred while the scheduler was suspended then
;;;2249   				they should be processed now.  This ensures the tick count does
;;;2250   				not	slip, and that any delayed tasks are resumed at the correct
;;;2251   				time. */
;;;2252   				{
;;;2253   					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
000086  4816              LDR      r0,|L47.224|
000088  6805              LDR      r5,[r0,#0]  ; xPendedTicks
;;;2254   
;;;2255   					if( xPendedCounts > ( TickType_t ) 0U )
00008a  b165              CBZ      r5,|L47.166|
;;;2256   					{
;;;2257   						do
00008c  bf00              NOP      
                  |L47.142|
;;;2258   						{
;;;2259   							if( xTaskIncrementTick() != pdFALSE )
00008e  f7fffffe          BL       xTaskIncrementTick
000092  b110              CBZ      r0,|L47.154|
;;;2260   							{
;;;2261   								xYieldPending = pdTRUE;
000094  2001              MOVS     r0,#1
000096  4911              LDR      r1,|L47.220|
000098  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L47.154|
;;;2262   							}
;;;2263   							else
;;;2264   							{
;;;2265   								mtCOVERAGE_TEST_MARKER();
;;;2266   							}
;;;2267   							--xPendedCounts;
00009a  1e6d              SUBS     r5,r5,#1
;;;2268   						} while( xPendedCounts > ( TickType_t ) 0U );
00009c  2d00              CMP      r5,#0
00009e  d1f6              BNE      |L47.142|
;;;2269   
;;;2270   						xPendedTicks = 0;
0000a0  2000              MOVS     r0,#0
0000a2  490f              LDR      r1,|L47.224|
0000a4  6008              STR      r0,[r1,#0]  ; xPendedTicks
                  |L47.166|
;;;2271   					}
;;;2272   					else
;;;2273   					{
;;;2274   						mtCOVERAGE_TEST_MARKER();
;;;2275   					}
;;;2276   				}
;;;2277   
;;;2278   				if( xYieldPending != pdFALSE )
0000a6  480d              LDR      r0,|L47.220|
0000a8  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000aa  b138              CBZ      r0,|L47.188|
;;;2279   				{
;;;2280   					#if( configUSE_PREEMPTION != 0 )
;;;2281   					{
;;;2282   						xAlreadyYielded = pdTRUE;
0000ac  2601              MOVS     r6,#1
;;;2283   					}
;;;2284   					#endif
;;;2285   					taskYIELD_IF_USING_PREEMPTION();
0000ae  0730              LSLS     r0,r6,#28
0000b0  490c              LDR      r1,|L47.228|
0000b2  6008              STR      r0,[r1,#0]
0000b4  f3bf8f4f          DSB      
0000b8  f3bf8f6f          ISB      
                  |L47.188|
;;;2286   				}
;;;2287   				else
;;;2288   				{
;;;2289   					mtCOVERAGE_TEST_MARKER();
;;;2290   				}
;;;2291   			}
;;;2292   		}
;;;2293   		else
;;;2294   		{
;;;2295   			mtCOVERAGE_TEST_MARKER();
;;;2296   		}
;;;2297   	}
;;;2298   	taskEXIT_CRITICAL();
0000bc  f7fffffe          BL       vPortExitCritical
;;;2299   
;;;2300   	return xAlreadyYielded;
0000c0  4630              MOV      r0,r6
;;;2301   }
0000c2  bd70              POP      {r4-r6,pc}
;;;2302   /*-----------------------------------------------------------*/
                          ENDP

                  |L47.196|
                          DCD      uxSchedulerSuspended
                  |L47.200|
                          DCD      uxCurrentNumberOfTasks
                  |L47.204|
                          DCD      xPendingReadyList
                  |L47.208|
                          DCD      uxTopReadyPriority
                  |L47.212|
                          DCD      pxReadyTasksLists
                  |L47.216|
                          DCD      pxCurrentTCB
                  |L47.220|
                          DCD      xYieldPending
                  |L47.224|
                          DCD      xPendedTicks
                  |L47.228|
                          DCD      0xe000ed04

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1904   
;;;1905   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1906   	{
000004  4606              MOV      r6,r0
;;;1907   	BaseType_t xYieldRequired = pdFALSE;
000006  2700              MOVS     r7,#0
;;;1908   	TCB_t * const pxTCB = xTaskToResume;
000008  4634              MOV      r4,r6
;;;1909   	UBaseType_t uxSavedInterruptStatus;
;;;1910   
;;;1911   		configASSERT( xTaskToResume );
;;;1912   
;;;1913   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1914   		maximum	system call (or maximum API call) interrupt priority.
;;;1915   		Interrupts that are	above the maximum system call priority are keep
;;;1916   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1917   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1918   		is defined in FreeRTOSConfig.h then
;;;1919   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1920   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1921   		been assigned a priority above the configured maximum system call
;;;1922   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1923   		from interrupts	that have been assigned a priority at or (logically)
;;;1924   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1925   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1926   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1927   		provided on the following link:
;;;1928   		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1929   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1930   
;;;1931   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  bf00              NOP      
00000c  21bf              MOVS     r1,#0xbf
00000e  f3ef8011          MRS      r0,BASEPRI
000012  f3818811          MSR      BASEPRI,r1
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  4605              MOV      r5,r0
;;;1932   		{
;;;1933   			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       prvTaskIsTaskSuspended
000028  b320              CBZ      r0,|L48.116|
;;;1934   			{
;;;1935   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1936   
;;;1937   				/* Check the ready lists can be accessed. */
;;;1938   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00002a  4816              LDR      r0,|L48.132|
00002c  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002e  b9e0              CBNZ     r0,|L48.106|
;;;1939   				{
;;;1940   					/* Ready lists can be accessed so move the task from the
;;;1941   					suspended list to the ready list directly. */
;;;1942   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
000030  4915              LDR      r1,|L48.136|
000032  6ae0              LDR      r0,[r4,#0x2c]
000034  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000036  6ac9              LDR      r1,[r1,#0x2c]
000038  4288              CMP      r0,r1
00003a  d300              BCC      |L48.62|
;;;1943   					{
;;;1944   						xYieldRequired = pdTRUE;
00003c  2701              MOVS     r7,#1
                  |L48.62|
;;;1945   					}
;;;1946   					else
;;;1947   					{
;;;1948   						mtCOVERAGE_TEST_MARKER();
;;;1949   					}
;;;1950   
;;;1951   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00003e  1d20              ADDS     r0,r4,#4
000040  f7fffffe          BL       uxListRemove
;;;1952   					prvAddTaskToReadyList( pxTCB );
000044  f894102c          LDRB     r1,[r4,#0x2c]
000048  2001              MOVS     r0,#1
00004a  4088              LSLS     r0,r0,r1
00004c  490f              LDR      r1,|L48.140|
00004e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000050  4308              ORRS     r0,r0,r1
000052  490e              LDR      r1,|L48.140|
000054  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000056  6ae1              LDR      r1,[r4,#0x2c]
000058  eb010181          ADD      r1,r1,r1,LSL #2
00005c  4a0c              LDR      r2,|L48.144|
00005e  eb020081          ADD      r0,r2,r1,LSL #2
000062  1d21              ADDS     r1,r4,#4
000064  f7fffffe          BL       vListInsertEnd
000068  e004              B        |L48.116|
                  |L48.106|
;;;1953   				}
;;;1954   				else
;;;1955   				{
;;;1956   					/* The delayed or ready lists cannot be accessed so the task
;;;1957   					is held in the pending ready list until the scheduler is
;;;1958   					unsuspended. */
;;;1959   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
00006a  f1040118          ADD      r1,r4,#0x18
00006e  4809              LDR      r0,|L48.148|
000070  f7fffffe          BL       vListInsertEnd
                  |L48.116|
;;;1960   				}
;;;1961   			}
;;;1962   			else
;;;1963   			{
;;;1964   				mtCOVERAGE_TEST_MARKER();
;;;1965   			}
;;;1966   		}
;;;1967   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000074  bf00              NOP      
000076  f3858811          MSR      BASEPRI,r5
00007a  bf00              NOP      
;;;1968   
;;;1969   		return xYieldRequired;
00007c  4638              MOV      r0,r7
;;;1970   	}
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;1971   
                          ENDP

000082  0000              DCW      0x0000
                  |L48.132|
                          DCD      uxSchedulerSuspended
                  |L48.136|
                          DCD      pxCurrentTCB
                  |L48.140|
                          DCD      uxTopReadyPriority
                  |L48.144|
                          DCD      pxReadyTasksLists
                  |L48.148|
                          DCD      xPendingReadyList

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        60
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  xPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  xIdleTaskHandle
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
