; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\task_log.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\task_log.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\STM32F10x_StdPeriph_Libraries -I..\STM32F10x_StdPeriph_Libraries\STM32F10x_StdPeriph_Driver\src -I..\STM32F10x_StdPeriph_Libraries\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\CoreSupport -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\FreeRTOS\Source -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\FreeRTOS\Source\portable\MemMang -I..\FreeRTOS -I..\User\Bsp -I..\SEGGER_RTT\RTT -I.\RTE\_Demo -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\task_log.crf ..\User\Task_Log.c]
                          THUMB

                          AREA ||i.Log||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_p
                          REQUIRE _printf_longlong_hex
                  Log PROC
;;;61     	*/
;;;62     void Log( const char * sFormat, ...)
000000  b40f              PUSH     {r0-r3}
;;;63     {
000002  b508              PUSH     {r3,lr}
;;;64     	va_list ParamList;
;;;65     
;;;66     	xSemaphoreTake( log_mutex_handle , portMAX_DELAY ); //获取互斥量
000004  f04f31ff          MOV      r1,#0xffffffff
000008  4809              LDR      r0,|L1.48|
00000a  6800              LDR      r0,[r0,#0]  ; log_mutex_handle
00000c  f7fffffe          BL       xQueueSemaphoreTake
;;;67     	
;;;68     	va_start(ParamList, sFormat);
000010  a803              ADD      r0,sp,#0xc
000012  9000              STR      r0,[sp,#0]
;;;69     
;;;70     	printf(sFormat, &ParamList);
000014  4669              MOV      r1,sp
000016  9802              LDR      r0,[sp,#8]
000018  f7fffffe          BL       __2printf
;;;71     	
;;;72     	xSemaphoreGive( log_mutex_handle ); //释放互斥量
00001c  2300              MOVS     r3,#0
00001e  461a              MOV      r2,r3
000020  4619              MOV      r1,r3
000022  4803              LDR      r0,|L1.48|
000024  6800              LDR      r0,[r0,#0]  ; log_mutex_handle
000026  f7fffffe          BL       xQueueGenericSend
;;;73     }
00002a  b001              ADD      sp,sp,#4
00002c  f85dfb14          LDR      pc,[sp],#0x14
;;;74     
                          ENDP

                  |L1.48|
                          DCD      log_mutex_handle

                          AREA ||i.TaskLog||, CODE, READONLY, ALIGN=2

                  TaskLog PROC
;;;80     	*/
;;;81     void TaskLog(void * p_parameters)
000000  b508              PUSH     {r3,lr}
;;;82     {
000002  4604              MOV      r4,r0
;;;83     	char log_char = ' ';
000004  2020              MOVS     r0,#0x20
000006  9000              STR      r0,[sp,#0]
;;;84     	
;;;85     	log_mutex_handle = xSemaphoreCreateMutex(); //log互斥资源
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       xQueueCreateMutex
00000e  4919              LDR      r1,|L2.116|
000010  6008              STR      r0,[r1,#0]  ; log_mutex_handle
;;;86     
;;;87     	if( log_mutex_handle == NULL )
000012  4608              MOV      r0,r1
000014  6800              LDR      r0,[r0,#0]  ; log_mutex_handle
000016  b908              CBNZ     r0,|L2.28|
;;;88     	{
;;;89     		 // The semaphore was not created and must not be used.
;;;90     		while(1);
000018  bf00              NOP      
                  |L2.26|
00001a  e7fe              B        |L2.26|
                  |L2.28|
;;;91     	}
;;;92     	
;;;93     	log_queue_handle = xQueueCreate( 512, 1 ); //创建Log队列 用于其他任务的通讯
00001c  2200              MOVS     r2,#0
00001e  2101              MOVS     r1,#1
000020  0248              LSLS     r0,r1,#9
000022  f7fffffe          BL       xQueueGenericCreate
000026  4914              LDR      r1,|L2.120|
000028  6008              STR      r0,[r1,#0]  ; log_queue_handle
;;;94     
;;;95     	if( log_queue_handle == NULL )
00002a  4608              MOV      r0,r1
00002c  6800              LDR      r0,[r0,#0]  ; log_queue_handle
00002e  b908              CBNZ     r0,|L2.52|
;;;96     	{
;;;97     		// Queue was not created and must not be used. 
;;;98     		while(1);
000030  bf00              NOP      
                  |L2.50|
000032  e7fe              B        |L2.50|
                  |L2.52|
;;;99     	}
;;;100    	
;;;101    	SEGGER_RTT_Init();
000034  f7fffffe          BL       SEGGER_RTT_Init
;;;102    	
;;;103    	
;;;104    	//等待所有任务 初始化完成
;;;105    	(*(unsigned char*)(p_parameters))++;
000038  7820              LDRB     r0,[r4,#0]
00003a  1c40              ADDS     r0,r0,#1
00003c  7020              STRB     r0,[r4,#0]
;;;106    	for( ; ; )
00003e  bf00              NOP      
                  |L2.64|
;;;107    	{
;;;108    		vTaskDelay(1);
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       vTaskDelay
;;;109    		if( *(unsigned char*)(p_parameters) == (configMAX_PRIORITIES-1))
000046  7820              LDRB     r0,[r4,#0]
000048  2802              CMP      r0,#2
00004a  d1f9              BNE      |L2.64|
;;;110    		{
;;;111    			break;
00004c  bf00              NOP      
00004e  bf00              NOP      
;;;112    		}
;;;113    	}
;;;114    	
;;;115    	Log("Task Log Start...");
000050  a00a              ADR      r0,|L2.124|
000052  f7fffffe          BL       Log
;;;116    	
;;;117    	for( ; ; )
000056  bf00              NOP      
                  |L2.88|
;;;118    	{
;;;119    		if( xQueueReceive( log_queue_handle , &( log_char ),( TickType_t ) 0 ) == pdPASS ) //队列里有数据
000058  2200              MOVS     r2,#0
00005a  4669              MOV      r1,sp
00005c  4806              LDR      r0,|L2.120|
00005e  6800              LDR      r0,[r0,#0]  ; log_queue_handle
000060  f7fffffe          BL       xQueueReceive
000064  2801              CMP      r0,#1
000066  d1f7              BNE      |L2.88|
;;;120    		{
;;;121    			SEGGER_RTT_PutChar(0,(char)log_char);
000068  f89d1000          LDRB     r1,[sp,#0]
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       SEGGER_RTT_PutChar
000072  e7f1              B        |L2.88|
;;;122    		}
;;;123    	}
;;;124    	
;;;125    	
;;;126    	
;;;127    	
;;;128    	
;;;129    }
;;;130    
                          ENDP

                  |L2.116|
                          DCD      log_mutex_handle
                  |L2.120|
                          DCD      log_queue_handle
                  |L2.124|
00007c  5461736b          DCB      "Task Log Start...",0
000080  204c6f67
000084  20537461
000088  72742e2e
00008c  2e00    
00008e  00                DCB      0
00008f  00                DCB      0

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;47     	*/
;;;48     int fputc(int ch, FILE *f) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;49     	
;;;50     	int temp_ch = ch;
000006  9400              STR      r4,[sp,#0]
;;;51     	xQueueSend( log_queue_handle , (void *)&temp_ch , portMAX_DELAY  );
000008  2300              MOVS     r3,#0
00000a  1e5a              SUBS     r2,r3,#1
00000c  4669              MOV      r1,sp
00000e  4803              LDR      r0,|L3.28|
000010  6800              LDR      r0,[r0,#0]  ; log_queue_handle
000012  f7fffffe          BL       xQueueGenericSend
;;;52     	
;;;53       //return (SEGGER_RTT_Write(0,&Temp_data,1));
;;;54     	return ch;
000016  4620              MOV      r0,r4
;;;55     }
000018  bd38              POP      {r3-r5,pc}
;;;56     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      log_queue_handle

                          AREA ||.data||, DATA, ALIGN=2

                  log_queue_handle
                          DCD      0x00000000
                  log_mutex_handle
                          DCD      0x00000000
