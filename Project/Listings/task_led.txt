; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\task_led.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\task_led.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\STM32F10x_StdPeriph_Libraries -I..\STM32F10x_StdPeriph_Libraries\STM32F10x_StdPeriph_Driver\src -I..\STM32F10x_StdPeriph_Libraries\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\CoreSupport -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\STM32F10x_StdPeriph_Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\FreeRTOS\Source -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\FreeRTOS\Source\portable\MemMang -I..\FreeRTOS -I..\User\Bsp -I..\SEGGER_RTT\RTT -I.\RTE\_Demo -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\task_led.crf ..\User\Task_LED.c]
                          THUMB

                          AREA ||i.LedFlashConfig||, CODE, READONLY, ALIGN=2

                  LedFlashConfig PROC
;;;60     	*/
;;;61     void LedFlashConfig(unsigned char id, unsigned short time )
000000  b538              PUSH     {r3-r5,lr}
;;;62     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;63     	LED_QUEUE_MSG_T led_queue_tx_msg ={0,0}; //发送的队列消息
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;64     	
;;;65     	if((id==1)||(id==2))
00000a  2c01              CMP      r4,#1
00000c  d001              BEQ      |L1.18|
00000e  2c02              CMP      r4,#2
000010  d10a              BNE      |L1.40|
                  |L1.18|
;;;66     	{
;;;67     		led_queue_tx_msg.id   = id;
000012  f88d4000          STRB     r4,[sp,#0]
;;;68     		led_queue_tx_msg.data = time;
000016  f8ad5002          STRH     r5,[sp,#2]
;;;69     		xQueueSend( led_queue_handle , (void *)&led_queue_tx_msg , portMAX_DELAY  );
00001a  2300              MOVS     r3,#0
00001c  1e5a              SUBS     r2,r3,#1
00001e  4669              MOV      r1,sp
000020  4802              LDR      r0,|L1.44|
000022  6800              LDR      r0,[r0,#0]  ; led_queue_handle
000024  f7fffffe          BL       xQueueGenericSend
                  |L1.40|
;;;70     	}
;;;71     	
;;;72     }  
000028  bd38              POP      {r3-r5,pc}
;;;73     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      led_queue_handle

                          AREA ||i.TaskLED||, CODE, READONLY, ALIGN=2

                  TaskLED PROC
;;;79     	*/
;;;80     void TaskLED(void * p_parameters)
000000  b508              PUSH     {r3,lr}
;;;81     {
000002  4604              MOV      r4,r0
;;;82     
;;;83     	LED_QUEUE_MSG_T led_queue_rx_msg ={0,0}; //接收的队列消息
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;84     	
;;;85     	unsigned short led1_tick_cnt = 0; //LED1的计数器 
000008  2700              MOVS     r7,#0
;;;86     	unsigned short led2_tick_cnt = 0; //LED2的计数器 
00000a  4680              MOV      r8,r0
;;;87     	
;;;88     	unsigned short led1_time_len = 0; //LED1的闪烁时间长度
00000c  2500              MOVS     r5,#0
;;;89     	unsigned short led2_time_len = 0; //LED2的闪烁时间长度
00000e  2600              MOVS     r6,#0
;;;90     	
;;;91     	LEDInit(); //管脚硬件初始化
000010  f7fffffe          BL       LEDInit
;;;92     	
;;;93     	led_queue_handle = xQueueCreate( 10, sizeof( LED_QUEUE_MSG_T ) ); //创建LED队列 用于其他任务的通讯
000014  2200              MOVS     r2,#0
000016  2104              MOVS     r1,#4
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       xQueueGenericCreate
00001e  492f              LDR      r1,|L2.220|
000020  6008              STR      r0,[r1,#0]  ; led_queue_handle
;;;94     
;;;95     	if( led_queue_handle == NULL )
000022  4608              MOV      r0,r1
000024  6800              LDR      r0,[r0,#0]  ; led_queue_handle
000026  b908              CBNZ     r0,|L2.44|
;;;96     	{
;;;97     		/* Queue was not created and must not be used. */
;;;98     		while(1);
000028  bf00              NOP      
                  |L2.42|
00002a  e7fe              B        |L2.42|
                  |L2.44|
;;;99     	}
;;;100    	
;;;101    	//等待所有任务 初始化完成
;;;102    	(*(unsigned char*)(p_parameters))++;
00002c  7820              LDRB     r0,[r4,#0]
00002e  1c40              ADDS     r0,r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;103    	for( ; ; )
000032  bf00              NOP      
                  |L2.52|
;;;104    	{
;;;105    		vTaskDelay(1);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       vTaskDelay
;;;106    		if( *(unsigned char*)(p_parameters) == (configMAX_PRIORITIES-1))
00003a  7820              LDRB     r0,[r4,#0]
00003c  2802              CMP      r0,#2
00003e  d1f9              BNE      |L2.52|
;;;107    		{
;;;108    			break;
000040  bf00              NOP      
000042  bf00              NOP      
;;;109    		}
;;;110    	}
;;;111    	
;;;112    	
;;;113    	Log("Task LED Start...");
000044  a026              ADR      r0,|L2.224|
000046  f7fffffe          BL       Log
;;;114    	
;;;115    	for( ; ; )
00004a  bf00              NOP      
                  |L2.76|
;;;116    	{
;;;117    		vTaskDelay(TASK_LED_INTERVAL);
00004c  2002              MOVS     r0,#2
00004e  f7fffffe          BL       vTaskDelay
;;;118    		
;;;119    		if( xQueueReceive( led_queue_handle , &( led_queue_rx_msg ),( TickType_t ) 0 ) == pdPASS ) //队列里有数据
000052  2200              MOVS     r2,#0
000054  4669              MOV      r1,sp
000056  4821              LDR      r0,|L2.220|
000058  6800              LDR      r0,[r0,#0]  ; led_queue_handle
00005a  f7fffffe          BL       xQueueReceive
00005e  2801              CMP      r0,#1
000060  d10e              BNE      |L2.128|
;;;120    		{
;;;121    			switch(led_queue_rx_msg.id)
000062  f89d0000          LDRB     r0,[sp,#0]
000066  2801              CMP      r0,#1
000068  d002              BEQ      |L2.112|
00006a  2802              CMP      r0,#2
00006c  d106              BNE      |L2.124|
00006e  e002              B        |L2.118|
                  |L2.112|
;;;122    			{
;;;123    				case 1:
;;;124    				{
;;;125    					led1_time_len = led_queue_rx_msg.data;
000070  f8bd5002          LDRH     r5,[sp,#2]
;;;126    				}break;
000074  e003              B        |L2.126|
                  |L2.118|
;;;127    				case 2:
;;;128    				{
;;;129    					led2_time_len = led_queue_rx_msg.data;
000076  f8bd6002          LDRH     r6,[sp,#2]
;;;130    				}break;
00007a  e000              B        |L2.126|
                  |L2.124|
;;;131    				default:
;;;132    				{}break;
00007c  bf00              NOP      
                  |L2.126|
00007e  bf00              NOP                            ;126
                  |L2.128|
;;;133    			}
;;;134    		}
;;;135    		
;;;136    		if(led1_time_len==0) //常灭
000080  b91d              CBNZ     r5,|L2.138|
;;;137    		{
;;;138    			Led1Off();
000082  f7fffffe          BL       Led1Off
;;;139    			led1_tick_cnt = 0; //不计时
000086  2700              MOVS     r7,#0
000088  e00e              B        |L2.168|
                  |L2.138|
;;;140    		}
;;;141    		else if(led1_time_len==65535) //常亮
00008a  f64f70ff          MOV      r0,#0xffff
00008e  4285              CMP      r5,r0
000090  d103              BNE      |L2.154|
;;;142    		{
;;;143    			Led1On();
000092  f7fffffe          BL       Led1On
;;;144    			led1_tick_cnt = 0; //不计时
000096  2700              MOVS     r7,#0
000098  e006              B        |L2.168|
                  |L2.154|
;;;145    		}
;;;146    		else
;;;147    		{
;;;148    			led1_tick_cnt++; //开始计时
00009a  1c78              ADDS     r0,r7,#1
00009c  b287              UXTH     r7,r0
;;;149    			if(led1_tick_cnt>=led1_time_len)
00009e  42af              CMP      r7,r5
0000a0  db02              BLT      |L2.168|
;;;150    			{
;;;151    				led1_tick_cnt=0;
0000a2  2700              MOVS     r7,#0
;;;152    				Led1Reverse();
0000a4  f7fffffe          BL       Led1Reverse
                  |L2.168|
;;;153    			}
;;;154    		}
;;;155    		
;;;156    		if(led2_time_len==0) //常灭
0000a8  b926              CBNZ     r6,|L2.180|
;;;157    		{
;;;158    			Led2Off();
0000aa  f7fffffe          BL       Led2Off
;;;159    			led2_tick_cnt = 0; //不计时
0000ae  f04f0800          MOV      r8,#0
0000b2  e7cb              B        |L2.76|
                  |L2.180|
;;;160    		}
;;;161    		else if(led2_time_len==65535) //常亮
0000b4  f64f70ff          MOV      r0,#0xffff
0000b8  4286              CMP      r6,r0
0000ba  d104              BNE      |L2.198|
;;;162    		{
;;;163    			Led2On();
0000bc  f7fffffe          BL       Led2On
;;;164    			led2_tick_cnt = 0; //不计时
0000c0  f04f0800          MOV      r8,#0
0000c4  e7c2              B        |L2.76|
                  |L2.198|
;;;165    		}
;;;166    		else
;;;167    		{
;;;168    			led2_tick_cnt++;  //开始计时
0000c6  f1080001          ADD      r0,r8,#1
0000ca  fa1ff880          UXTH     r8,r0
;;;169    			if(led2_tick_cnt>=led2_time_len)
0000ce  45b0              CMP      r8,r6
0000d0  dbbc              BLT      |L2.76|
;;;170    			{
;;;171    				led2_tick_cnt=0;
0000d2  f04f0800          MOV      r8,#0
;;;172    				Led2Reverse();
0000d6  f7fffffe          BL       Led2Reverse
0000da  e7b7              B        |L2.76|
;;;173    			}
;;;174    		}
;;;175    	}
;;;176    }
;;;177    
                          ENDP

                  |L2.220|
                          DCD      led_queue_handle
                  |L2.224|
0000e0  5461736b          DCB      "Task LED Start...",0
0000e4  204c4544
0000e8  20537461
0000ec  72742e2e
0000f0  2e00    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  led_queue_handle
                          DCD      0x00000000
